Some help from Santiago to understand the fulfill() and fail() flow in AirnodeRRP.sol/

=========================================
Santiago Aceñolaza  4 hours ago

Keep in mind that ExampleClient.sol just extends the AirnodeClient.sol contract which has a pointer to the Airnode.sol contract that has the fail() function. This contract is the one that actually gets called by the node and then forwards the fullfill to the client contract.
I guess the confusion here might be that ExampleClient.sol contract uses the same name for the fulfill() function as the Airnode.sol contract but the flow is basically this:
node (js code running in lambda) sends a tx to call fulfill() in the Airnode.sol contract and within this method we invoke the fullfill() function in the ExampleClient.sol contract.
if tx reverts for whatever reason (probably an error in the ExampleClient.fulfill() method)  then a new tx is sent from the node to the Airnode.sol contract. This time the fail() function is invoked.
Airnode.sol fail() will remove the request id from the requestIdToFulfillmentParameters mapping and add it to the  requestWithIdHasFailed mapping. Finally an event ClientRequestFailed is emitted but no calls to the ExampleClient.sol contracts are made.

=====================================
Warren Anderson  < 1 minute ago

This helps me, thanks. I have some questions about your three points if that’s OK.
----------------------------------------------------
1. node (js code running in lambda) sends a tx to call fulfill() in the Airnode.sol contract and within this method we invoke the fullfill() function in the ExampleClient.sol contract.
 So Airnode (Lambda) calls fulfill() in AirnodeRRP.solwhich in turn calls the Client Contract using fulfillAddress and fulfillFunctionId. Which I assume is the call below (whose syntax I do not understand but that is not important now).
// I think this is just logging on-chain?
emit ClientRequestFulfilled(airnodeId, requestId, statusCode, data);
// And this the call to the client contract?
(callSuccess, callData) = fulfillAddress.call( // solhint-disable-line
      abi.encodeWithSelector(fulfillFunctionId, requestId, statusCode, data)
);

----------------------------------------------------
2. if tx reverts for whatever reason (probably an error in the ExampleClient.fulfill() method)  then a new tx is sent from the node to the Airnode.sol contract. This time the fail() function is invoked.
So an error happens in client contract when its fulfull() function is called by AirnodeRRP.sol. Does the client contract see the error in its own code and act upon it if it wants to? How did AirnodeRRP.sol see the failure, is it just the mechanics of the tx it is trying to make?

----------------------------------------------------
3. Airnode.sol fail() will remove the request id from the requestIdToFulfillmentParameters mapping and add it to the  requestWithIdHasFailed mapping. Finally an event ClientRequestFailed is emitted but no calls to the ExampleClient.sol contracts are made.
Because of the error (in the client contract) there is a revert in AirnodeRRP.sol which removes the requestID. The emit again is logging the fail?
// Assume this is just logging again
emit ClientRequestFailed(airnodeId, requestId);

=========================================
Santiago Aceñolaza  22 hours ago
That's exactly right.  The AirnodeRrp.fulfill() function calls the ExampleClient.fulfill() in that line you posted.
I made the assumption that the error could probably happen in the ExampleClient contract becuase the AirnodeRrp.fulfill() function is extremely simple and it just redirects to the AirnodeClient.fulfill() function. Now in regards of the client capturing the error I guess that's not likely to happen. I know that solidity supports try/catch but that's not something I've seen on our contracts. With that said, if an error occurs in a client then the whole transaction gets reverted meaning that the originator of the tx could definitely  know that there was an error. The originator in this case is the node js code.  https://github.com/api3dao/airnode/blob/fix-protocol-tests/packages/node/src/evm/fulfillments/api-calls.ts#L126
The emit if for any app listening for onchain events and everything that happens in 3 gets triggered by a new tx. I might have not completely understood this one :slightly_smiling_face:
Please let me know if something is not clear or needs more (better) explanation.