---
title: Airnode ABI ËßÑËåÉ
---

<TitleSpan>ÊäÄÊúØËßÑÊ†ºÔºö</TitleSpan>

# {{$frontmatter.title}}

<VersionWarning/>

<TocHeader /> <TOC class="table-of-contents" :include-level="[2,4]" />

[ÂêàÁ∫¶Â∫îÁî®‰∫åËøõÂà∂Êé•Âè£ÔºàABIÔºâ](https://docs.soliditylang.org/en/v0.6.12/abi-spec.html)Áî®‰∫éÁºñÁ†Å‰∏çÂêåÁ±ªÂûãÁöÑÊï∞ÊçÆÔºåÂêåÊó∂‰∏éEthereumÂêàÁ∫¶‰∫§‰∫í„ÄÇ Âõ†Ê≠§ÔºåSolidityÂíåÁõ∏Â∫îÊ®°ÂùóÔºåÂ¶Ç[web3.js](https://web3js.readthedocs.io/)Âíå [ethers.js](https://docs.ethers.io/) ÔºåÈÉΩÂ∞ÜABIÁöÑÁºñÁ†Å-Ëß£Á†ÅÂäüËÉΩËßÜ‰∏∫‰∏ÄÊµÅÁöÑÁªÑÊàêÈÉ®ÂàÜ„ÄÇ Ëøô‰ΩøÂæó‰ΩøÁî®ÂêàÁ∫¶ABIÂØπAPIË∞ÉÁî®ÂèÇÊï∞ËøõË°åÁºñÁ†ÅÔºåÊàê‰∏∫‰∏Ä‰∏™ÈùûÂ∏∏ÊúâÂê∏ÂºïÂäõÁöÑÈÄâÊã©„ÄÇ

Â∞ΩÁÆ°‰ΩøÁî®ÂêàÁ∫¶ABIÂØπAPIË∞ÉÁî®ÂèÇÊï∞ËøõË°åÁºñÁ†ÅÊúâÂæàÂ§öÂ•ΩÂ§ÑÔºå‰ΩÜÂÆÉ‰∏çËÉΩÁõ¥Êé•Áî®‰∫éËøô‰∏™ÁõÆÁöÑ„ÄÇ ÂºïËá™[SolidityÊñáÊ°£](https://docs.soliditylang.org/en/v0.6.12/abi-spec.html)Ôºö

> ÁºñÁ†Å‰∏çÊòØËá™ÊàëÊèèËø∞ÁöÑÔºåÂõ†Ê≠§ÈúÄË¶ÅËß£Á†ÅÁ®ãÂ∫è„ÄÇ

ËøôÊÑèÂë≥ÁùÄÔºåÂΩì‰º†ÈÄíAPIË∞ÉÁî®ÂèÇÊï∞Ôºà`bytes`Á±ªÂûãÔºâÊó∂ÔºåËøòÈúÄË¶Å‰º†ÈÄíËøô‰∫õÂèÇÊï∞ÁöÑÁ±ªÂûãÂàóË°®ÔºåËøôÂæàÈ∫ªÁÉ¶ÔºåËÄå‰∏î‰∏çÊ∏ÖÊ•öËøô‰∫õÁ±ªÂûãÂ¶Ç‰ΩïÁºñÁ†Å„ÄÇ ‰Ωú‰∏∫‰∏Ä‰∏™Ëß£ÂÜ≥ÊñπÊ°àÔºåAirnode‰ΩøÁî®_Airnode ABI ËßÑËåÉ_ÔºåËøôÊòØÂêàÁ∫¶ABIËßÑËåÉÁöÑ‰∏Ä‰∏™Êâ©Â±ïÔºåÂåÖÊã¨‰∏Ä‰∏™‰øùÊåÅÊ®°ÂºèÁöÑÂ§¥ÈÉ®„ÄÇ

## Â§¥ÈÉ®

Airnode ABIËßÑËåÉÂ§¥ÈÉ®ÁöÑÁ±ªÂûãÊòØ`bytes32`Ôºå‰Ωú‰∏∫Ê®°ÂºèÔºàÂç≥ÊèèËø∞APIË∞ÉÁî®ÂèÇÊï∞ÁöÑÁ±ªÂûãÔºâ„ÄÇ Â§¥ÈÉ®ÊòØ‰ª• UTF-8ÁºñÁ†ÅÁöÑÔºå‰ª•‰æø‰∫é‰ΩøÁî®„ÄÇ ‰∏ãÈù¢ÊòØ‰∏Ä‰∏™Á§∫‰æãÔºö

```
"1BSasbiuBa"
```

Á¨¨‰∏Ä‰∏™Â≠óÁ¨¶Ôºå `1`, Ë°®Á§∫ÁºñÁ†ÅÁâàÊú¨„ÄÇ ÂêéÈù¢ÁöÑÊØè‰∏™Â≠óÁ¨¶‰ª£Ë°®‰∏Ä‰∏™ API Ë∞ÉÁî®ÂèÇÊï∞ÁöÑÁ±ªÂûã„ÄÇ

### Á±ªÂûãÁºñÁ†Å

Á±ªÂûã‰ª• UTF-8 Â≠óÁ¨¶ÁºñÁ†ÅÔºåÂÖ∑‰ΩìÂ¶Ç‰∏ãÔºö

```
B: bytes
b: bytes32
S: string
s: string32
a: address
u: uint256
i: int256
f: bool
```

Ê≥®ÊÑèÔºåÂä®ÊÄÅÂ§ßÂ∞èÁöÑÁ±ªÂûãÁî®Â§ßÂÜôÂ≠óÊØçË°®Á§∫Ôºå ÈùôÊÄÅÂ§ßÂ∞èÁöÑÁ±ªÂûãÁî®Â∞èÂÜôÂ≠óÊØçË°®Á§∫„ÄÇ Âè¶Â§ñÈúÄË¶ÅÊ≥®ÊÑèÁöÑÊòØÔºå`s`‰ª£Ë°®`string32`Ôºå‰ΩÜËøôÊòØ‰∏Ä‰∏™‰∫∫‰∏∫ËÆæÂÆöÁöÑÁ±ªÂûãÔºåÂÆÉ‰∏çÊòØ[solidity Á±ªÂûã](https://docs.soliditylang.org/en/latest/types.html)ÁöÑ‰∏ÄÈÉ®ÂàÜ„ÄÇ ËøôÁßçÁ±ªÂûã‰ª£‰πã‰ª• `bytes32`Âú®Èìæ‰∏äË°®Á§∫ÁöÑ„ÄÇ ÂéüÂõ†Âú® [string32 ËØ¶ÊÉÖ](airnode-abi-specifications.md#string32) ‰∏≠ËøõË°å‰∫ÜËØ¶ÁªÜËß£Èáä„ÄÇ

## ÁºñÁ†ÅÊ†ºÂºè

Airnode ABI ËßÑÊ†ºÊúâ‰ª•‰∏ãÁºñÁ†ÅÊ†ºÂºè(ÊúâÁÇπ Á±ª‰ºº‰∫é [SDS](https://github.com/antirez/sds))Ôºö

```
[------------------------][-----------------------------------------]
bytes32Á±ªÂûãÂ§¥ÈÉ®      API Ë∞ÉÁî®ÂèÇÊï∞Âêç‚ÄìÂÄºÈÖçÂØπ
```

ËØ∑Ê≥®ÊÑèÔºåÊØè‰∏™APIË∞ÉÁî®ÂèÇÊï∞‰πãÂâçÈÉΩÊúâÁ±ªÂûã `Â≠óËäÇ32` ÁöÑÂêçÁß∞„ÄÇ

## ÁºñÁ†ÅÁ§∫‰æã

Ë¶ÅÁºñÁ†Å‰ª•‰∏ãAPIË∞ÉÁî®ÂèÇÊï∞

```json
{
  "MyFirstBytes": "0x1234",
  "MyString": "1234",
  "MyFirstAddress": "0x0000000000000000000000000000000000001234",
  "MyString32": "1234",
  "MyBytes32": "0x68656c6c6f000000000000000000000000000000000000000000000000000000",
  "MyInt256": "-1234",
  "MyUint256": "1234",
  "MySecondBytes": "0x5678",
  "MySecondAddress": "0x0000000000000000000000000000000000005678"
}
```

ÊÇ®ÈúÄË¶ÅÂú®ËØ∑Ê±ÇËÄÖÂêàÁ∫¶‰∏≠ËøôÊ†∑ÂÅöÔºö

```solidity
bytes memory parameters = abi.encode(
    bytes32("1BSasbiuBa"),
    bytes32("MyFirstBytes"), bytes(hex"1234"),
    bytes32("MyString"), "1234",
    bytes32("MyFirstAddress"), 0x0000000000000000000000000000000000001234,
    bytes32("MyString32"), bytes32("1234"),
    bytes32("MyBytes32"), 0x68656c6c6f000000000000000000000000000000000000000000000000000000,
    bytes32("MyInt256"), -1234,
    bytes32("MyUint256"), 1234,
    bytes32("MySecondBytes"), bytes(hex"5678"),
    bytes32("MySecondAddress"), 0x0000000000000000000000000000000000005678
);
```

ËØ∑Ê≥®ÊÑèÔºåÊÇ®‰∏çÈúÄË¶Å‰∏∫ÂêàÁ∫¶Ê∑ªÂä†Â§ñÈÉ®Â∫ìÔºå `abi.encode()` Âú®gas‰ΩøÁî®ÊñπÈù¢Ë¥πÁî®Áõ∏ÂΩì‰ΩéÂªâ(‰∏éÂ§áÈÄâÁºñÁ†ÅÊñπÊ≥ïÁõ∏ÊØî)„ÄÇ

## Ëß£Á†ÅÁ§∫‰æã

Â¶ÇÊûú‰Ω†Áü•ÈÅìÁºñÁ†ÅÂèÇÊï∞ÁöÑÊ®°ÂºèÔºåÁÑ∂ÂêéÂ∞±ÂèØ‰ª•Âú®Èìæ‰∏äÂØπÂÖ∂Ëß£Á†Å„ÄÇ ‰æãÂ¶ÇÔºåÂ¶ÇÊûúÊ®°ÂºèÊòØ `(bytes,string)`Ê†ºÂºèÁöÑ:

```solidity
(
    bytes32 header,
    bytes32 name1, bytes memory value1,
    bytes32 name2, string memory value2
) = abi.decode(parameters, (bytes32,bytes32,bytes,bytes32,string));
```

Note that this disregards the header and hard codes the schema into the code. It is also possible to parse the header on-chain and decode accordingly, yet that would be a lot more complex.

## Details

### `string32`

A parameter being of type `string32` (encoded as characted `s` in the ABI specification schema header) implies that the parameter is UTF-8 encoded text. For example, if the parameter is

```
0x68656c6c6f000000000000000000000000000000000000000000000000000000
```

Airnode will decode it as

```
"hello"
```

and feed that to the API, which is what the user would want to do in most cases. This becomes a problem if the parameter is not encoded text, but for example a hash such as:

```
0x1fd36c61981313c0c155d33ffac0325bd7c00d21d52442981bb13d2fa13e8f71
```

If this hash is encoded as a `string32` type, Airnode will decode it as:

```
√ìla¬ò√Ä√ÅU√ì?√∫√Ä2[√ó√Ä
!√ï$B¬ò¬±=/¬°>¬èq
```

which is probably not what the user is looking for. For these use cases, the user should use the [`bytes32`](airnode-abi-specifications.md#bytes32) type instead.

### `bytes32`

To encode a `bytes32` hash on chain, use the `bytes32` type which is represented by `b` in the ABI header schema.

```solidity
bytes memory parameters = abi.encode(
    bytes32("1b"),
    bytes32("MyBytes32"), 0x68656c6c6f000000000000000000000000000000000000000000000000000000,
);
```

When decoded by Airnode, the value would be the hash itself:

```
"0x1fd36c61981313c0c155d33ffac0325bd7c00d21d52442981bb13d2fa13e8f71"
```

If you want to store 32 byte string values on chain, use the [`string32`](airnode-abi-specifications.md#string32) type instead.

### `bool`

The `bool` type, encoded as charatcter `f` using the ABI specification schema can be used to encode a boolean value. The header symbol is `f`, because character `b` was already reserved for bytes encodings. So we chose letter `f` as bool values are commonly used to represent "boolean flags".

### Omitted types

`array` and `tuple` are omitted because they are not suitable to be used as API parameters. `uint8-uint128`, `int8-int128`, `bytes1-bytes31` are omitted because they are padded to 32 bytes by the ABI encoder anyway (meaning that the user should simply typecast these to the 32-byte versions).

### Size limit

The header can encode up to 31 parameters (and 1 byte is used to encode the encoding version). This is far more than what would be needed in practice, and thus is tolerated to avoid a more complex solution.

### Padding

[Strict encoding mode](https://docs.soliditylang.org/en/v0.6.12/abi-spec.html#strict-encoding-mode) is used so that you can decode the values later on. This means that each parameter will be padded with zeros to complete them to 32 bytes. Although this padding increases gas costs, ABI encoding/decoding functions being cheap balances this. Furthermore, the [template](../../concepts/template.md) pattern used in the protocols allows for the referencing of these encoded parameters without explicitly passing them in requests, making the increased cost induced by padding irrelevant in most cases.

## `@api3/airnode-abi`

Encode and decode parameters with the [airnode-abi](../packages/airnode-abi.md) package.

```js
import { encode } from '@api3/airnode-abi';
import { decode } from '@api3/airnode-abi';

const parameters = [
  { type: 'string32', name: 'from', value: 'ETH' },
  { type: 'uint256', name: 'amount', value: '100000' },
];
const encodedData = encode(parameters);
const decoded = decode(encodedData);

console.log('ENCODED:', encodedData);
console.log('\nDECODED:', decoded);
```

See the package doc [airnode-abi](../packages/airnode-abi.md) for more information on how to encode and decode with Airnode ABI off-chain. Also see code samples in the [examples](https://github.com/api3dao/airnode/tree/v0.5/packages/airnode-examples) package.

- [request-utils.ts](https://github.com/api3dao/airnode/blob/v0.5/packages/airnode-examples/integrations/coingecko/request-utils.ts#L8)
