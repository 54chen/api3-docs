---
title: 中继元数据身份验证
---

<TitleSpan>概念和定义</TitleSpan>

# {{$frontmatter.title}}

<VersionWarning/>

<TocHeader /> <TOC class="table-of-contents" :include-level="[2,3]" />

有两种方法可以通过 API 供应商管理他们的 API 的 访问，这两种方法可以被称为请求者的链上智能合约管理。

- [授权者](../grp-providers/guides/build-an-airnode/apply-auth.md)(链上)
- [中继元数据安全方案](../grp-providers/guides/build-an-airnode/api-security.md)(链下)

中继元数据是已知的请求者(智能合约) 通过 Airnode传递到 API 端点的信息。

使用中继元数据安全方案，不需要区块链特定知识或API供应商的区块链交互，也没有区块链交易（gas）费用。 只需在部署Airnode的过程中，在Airnode `config.json` 文件中应用所需的安全方案字段，见[构建Airnode](../grp-providers/guides/build-an-airnode/)。 然后让你的API操作根据客户数据库，检查配置的任何安全方案值（通常是 `sponsorAddress`）。

## 简单示例

下面的图示是将传输的元数据用于安全 目的的一种方式。 这里是一个赞助者 (例如 开发者或客户）提交了他们的 `sponsorAddress` ，由一个 API 供应商存储。 `sponsorAddress`可以用来验证赞助者的智能合约的请求。</p>

![concept-authorizer](../assets/images/relay-meta-flow.png)

The following sections relate to the numbers shown in the diagram above.

### 1: Deploy Airnode

An Airnode is deployed with the `sponsorAddress` security scheme instructing Airnode to pass along the `sponsorAddress` with all requests.

### 2: Register Sponsors

A sponsor is the developer of an on-chain smart contract that wishes to request off-chain data from an API provider. A sponsor has a know `sponsorAddress`. The API provider can request the `sponsorAddress` from the sponsor using a webform as part of a paid subscription setup.

### 3: Making Requests

When a smart contract (requester) makes a request of any API operation, the `sponsorAddress` will be part of the request. A sponsor can have more than one requester.

- 3a: The requester makes a request to Airnode.
- 3b: Airnode adds the `sponsorAddress` to the request before passing the request to the API operation. The API operation performs a lookup on the `sponsorAddress` to verify it has a subscription. If verified the API operation returns the response to Airnode.
- 3c: Airnode returns the response to the requester.

## Security Schemes

Including the `sponsorAddress` used in the [Simple Example](./relay-meta-auth.md#simple-example) above, there are five _relayed meta data security schemes_ that can be incorporated into any Airnode.

- [relayChainId](../grp-providers/guides/build-an-airnode/api-security.md#relaychainid) - The chain ID the request came from.
- [relayChainType](../grp-providers/guides/build-an-airnode/api-security.md#relaychaintype) - The chain type the request came from.
- [relaySponsorAddress](../grp-providers/guides/build-an-airnode/api-security.md#relaysponsoraddress) - The sponsor's wallet address. The sponsor owns and operates one or more requesters.
- [relaySponsorWalletAddress](../grp-providers/guides/build-an-airnode/api-security.md#relaysponsorwalletaddress) - Other wallet addresses associated with each requester. These are owned and funded by a sponsor to pay on-chain gas costs.
- [relayRequesterAddress](../grp-providers/guides/build-an-airnode/api-security.md#relayrequesteraddress) - The on-chain address of the requester (smart contract).
