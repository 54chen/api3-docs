---
title: Airnode
---

<TitleSpan>简介</TitleSpan>

# {{$frontmatter.title}}

<VersionWarning/>

<TocHeader /> <TOC class="table-of-contents" :include-level="[2,3]" />

Airnode是一个无服务器的预言机节点，以 "一劳永逸 "的理念设计。 Airnode由两部分组成：作为自我托管或云提供商功能（如AWS或GCP）部署的链外**Airnode** （又称 "节点"），以及链上**协议合约**AnnodeRrp.sol。

> ![2-parts](./assets/images/summary-airnode-2-parts.png) <br/><br/>
> 
> <p class="diagram-line" style="color:gray;">Airnode由两部分组成：>链外Airnode 又称 "节点"），通常部署为一组云供应商的> 函数（如AWS或GCP），以及链上协议合同AnnodeRrp.sol。</p>
**Airnode**的核心哲学是让API供应商轻松运行自己的_预言机节点_。 这样，他们就可以向任何对其服务感兴趣的链上_去中心化应用_（dApp）提供数据，而不需要中间商。

这个机制的核心是 **Airnode**, 一个开源的预言机节点。 它被设计成任何API供应商均可轻松部署，几乎无需维护。 Airnode让dApp开发者编写_智能合约_，与API供应商的链上数据交互。

Airnode的设计机制消除了API供应商对链上和链下的担忧。 Airnode的设置后不管的框架就是为了实现其简易性而生。

::: tip

如果你想了解更多关于Airnode的应用情况，请阅读<a href="/api3-whitepaper-v1.0.2.pdf#Airnode:%20A%20Node%20Designed%20for%20First-Party%20Oracles" 
target="_api3-whitepaper">API3白皮书</a>的第4节，_Airnode：专为第一方预言机设计的节点_。

:::

## 专为第一方预言机设计

第一方预言机是API3解决方案的组成部分。 这意味着每个API都由API的所有者，而不是第三方操作的预言机来提供服务。

本文讨论了使用第一方预言机的优点，讨论了API供应商用目前可用的解决方案来操作自己的预言机不可行的原因，以及如何用Airnode解决这个问题。

## 摆脱中间商的好处

第一方预言机是针对中间商问题的一个简单明了的解决方案。 原则上，这些是由API供应商自己操作的预言机，他们将在智能合约平台的协议层面用他们的私钥签署响应。 这种方法是数据没有被篡改的最好证明。 此外，第一方预言机是默认私有的，因为第三方无法观察到正在处理的API的原始数据，这就扩大了他们可以原生使用的用例范围。

由第一方预言机组成的数据源与雇用中间商的数据源相比，更具成本效益，因为后者需要为中间商的服务付费，并为数据源的获取提供激励（被称为中间商税）。 此外，第一方的数据馈送，将需要设置更少的预言机，因为它不需要在预言机层面进行过度冗余的去中心化，以防止第三方攻击。 假设每个API通常由至少两个第三方预言机提供服务，我们保守地估计，由第一方预言机提供的数据馈送在gas成本方面，将至少提高50%的效率。

第一方预言机也提供了数据源和去中心化方面必须的透明度。 鉴于每个API供应商都有一个预言机（可以在链上看到），服务于一个数据源的预言机数量，将准确地代表它的去中心化程度。 这是因为在预言机和数据源之间是一对一映射的。 此外，API供应商将通过链外渠道发布其链上身份，这将允许用户验证他们在给定时间消费的数据。

最后，让 API 提供商运营预言机有助于解决法律问题，因为 API 服务不再需要授权给第三方，API 供应商将获得全部收入。 此外，这解决了寻租的第三方预言机问题，并允许将资金重新分配到承担繁重工作的群体，即API供应商。 激励 API 供应商，使他们的经济利益与 API3 生态系统的利益保持一致，从而在两者之间建立起牢固的相互联系。

## 链外数据签名

这里有一种混合解决方案，仍然依赖于第三方预言机，但不会让他们篡改数据。 在这个方案中，API供应商用他们的私钥在链外签署他们的数据，并通过常规 API 端点提供服务。 第三方预言机调用此端点以获取签名数据，并将其发布到链上。 然后可以使用 API 提供者的公钥，在链上验证数据的真实性——即第三方预言机没有篡改。

虽然这个方案消除了在预言机层面上的数据篡改风险，但它本质上只是一种折衷。 由于依赖第三方预言机，它只得继续遭受由此引起的生态系统问题，此外，它需要修改API以实现链外签名。 这导致即使与常规的基于第三方预言机的解决方案相比，API的选择也非常有限，并且限制了该解决方案的生态系统在应用规模上的增长潜力。

## API提供商运行预言机 的障碍

In its previous efforts, API3 communicated with API providers extensively and observed the following barriers to oracle onboarding and operation:

1. Traditional API providers are typically not more familiar with blockchain technologies than the general public. This applies even for the ones that curate cryptocurrency market data—as their main operation is collecting data from exchange APIs, processing them, and serving the result through their own APIs—which does not require any blockchain-specific know-how. Therefore, they typically cannot readily operate an oracle node with in-house resources.

2. There is no job market for oracle node operators. Even if some API providers were to obtain the specific know-how needed by hiring the few node operators that are available, this would not be a scalable solution.

3. Operating an oracle node consumes a lot of resources in the form of person-hours and infrastructure costs. Unless one is guaranteed significant subsidies or future profits, operating an oracle node is financially infeasible.

4. Operating an oracle node requires the API providers to transact with cryptocurrencies. Specifically, they must pay for gas costs in the native currency (e.g., ETH) and receive payments in one or more cryptocurrencies. This disqualifies the vast majority of API providers for compliance-related, legal and accounting reasons. In addition, any scheme that requires API providers to stake funds is categorically rejected for similar reasons related to financia risks.

## Airnode Features

Airnode is a fully-serverless oracle node that is designed specifically for API providers to operate their own oracles. It addresses many of the issues API providers face in relation to oracle nodes:

1. It does not require any specific know-how to operate. In fact, it is difficult to even speak of any operation as Airnode is designed around the "set and forget" principle.

2. It does not require any day-to-day maintenance such as updating the operating system or monitoring the node for uptime thanks to existing fully managed serverless technology. It is designed to be stateless, which makes it extremely resilient against any problems that can cause permanent downtime and require an operator intervention.

3. It is built on services priced on-demand, meaning that the node operators are charged only by the usage of their node. This allows API providers to run an oracle for free and start paying only after they start generating revenue.

4. It does not require the node operators to handle cryptocurrency at all. Its protocol is designed in a way that the requester covers all gas costs.

One way to see Airnode is as a lightweight wrapper around a Web API that allows it to communicate with smart contract platforms with no overhead or payment token friction. In terms of the involvement required from an API provider, using Airnode can be likened to using an API gateway that makes an API accessible over the Web, rather than operating a blockchain node as a side-business. The intent is for Airnode to become as ubiquitous and mundane for APIs as using an API gateway, which will make a vast variety of first-party oracles available to API3.

API providers invest significant resources to build infrastructure that has high availability rates. It is important for the oracle node implementation not to contain individual points of failure that might cause downtime. Existing solutions using third-party oracles depend on over-redundancy at the oracle level to cover for this, which results in excessive costs. API3 envisions each API to only be served by its first-party oracle, which means the redundancy has to be implemented at the level of the individual Airnode. The fact that the node is fully serverless facilitates this across different availability zones of a single cloud provider, or even across multiple cloud providers. Apart from that, it will be possible to containerize Airnode and operate it on-premises. However, using the serverless version will be recommended for almost all use cases.

Airnode is developed by the founding members of API3 and is now open-sourced. The software is feature-complete for current protocols, and further development will be funded by API3 in the form of grants.

## Airnode Protocol

Preferring the better-specified API connectivity problem over the oracle problem, API3 believes that an oracle node should be designed to interface APIs with smart contract platforms very well, rather than as a sandbox that can purportedly be used for any imaginable purpose. Based on this philosophy, the Airnode protocol is designed to follow the self-emergent patterns used by APIs to achieve as transparent and frictionless of an API–smart contract platform interface as possible.

The first and the most commonly used API style follows the request–response pattern, where the user makes a request with parameters and the API responds as soon as possible. This is the first pattern that Airnode supports since it is easy to standardize and integrate with existing APIs that follow the same pattern. An example use case of this scheme would be requesting the result of a specific match to be delivered, which can be used to resolve the respective prediction market. In addition, Airnode is planned to support the publish–subscribe pattern, where the user requests the oracle to call back a specific method when parametrized conditions are met. For example, a decentralized exchange may request the oracle to trigger a liquidation event for a user in a leveraged position when ETH price drops below a particular price. Either of these patterns can be used to implement the live data feeds that DeFi applications use today, but they can also support a much larger variety of use cases in the form of dAPIs.

The Airnode protocol is designed in such a way that the request contract's sponsor assumes all gas costs, including even the request fulfillment (response) transactions. This is achieved by each Airnode having a separate wallet for each sponsor, similar to how cryptocurrency exchanges automatically designate wallets to which the users will deposit funds. The sponsor funds this wallet with the native currency (e.g. ETH) either in a lump sum or through per-request microtransactions. The funds in this wallet are used to fulfill all of the following requests made by the sponsor. This scheme has significant advantages:

- The volatility in gas costs and payment token prices (e.g., LINK) makes it virtually impossible for oracles to set profitable yet competitive prices. Calculating prices dynamically on-chain requires multiple data feeds and adds a significant gas overhead per-request. With the Airnode protocol, the API providers do not have to concern themselves with gas costs, and can use pricing schemes such as $0.1 per call or $100 per month, which is similar to typical API pricing models.

- It is not reasonable to expect API providers to be able to convert fiat into cryptocurrency and fund their node wallets as a part of their day-to-day operations. In this scheme, the node operator never has to think about their node wallet balance.

- As seen in an attack performed on an Airnode competitor's data feeds, oracle nodes that use a common wallet to fulfill requests are susceptible to attackers spamming requests to drain their wallets. The solution to this is for the node operators to maintain a whitelist of trusted addresses that they will accept requests from. In addition to the difficulty of determining which contracts are supposed to be trusted in this context, this renders any kind of public listing service practically infeasible. This is a critical issue, as it stops the little independent ecosystem growth there is dead in its tracks. Airnode is not susceptible to this type of an attack, as a sponsor's designated wallet is only used to fulfill requests from the said sponsor, and cannot be drained by others.

- Traditional oracle nodes have to fulfill all requests with very high gas prices, as they cannot tolerate their transaction queue being blocked by a single transaction made with a low gas price. With the Airnode protocol, this is no longer a concern, as each sponsor will have a separate transaction queue. Then, sponsors whose requests are not time-critical would be able to provide the fulfillment gas price as a request parameter and enjoy service at a much lower gas cost. This scheme can be expected to synergize with EIP-1559.

Finally, let us briefly mention how the Airnode protocol approaches monetization. It is common for a project-specific token to be worked into the core of the protocol in an attempt to ensure that the said token is needed. However, this induces an enormous gas price overhead, severely restricts alternative monetization options and creates overall friction. For these reasons, the Airnode protocol purposefully avoids using such a token. Instead, the node operator is allowed to associate custom authorizer contracts with their oracle endpoints, which essentially decide if a requester should be responded to based on any criteria that can be implemented on-chain. The authorizer contracts can be used to enforce whitelists, blacklists, monthly subscription payments or per-call fees. This scheme is both very flexible and is implemented in a way that does not add any gas cost overheads. Although dAPI monetization is a completely independent matter, the flexibility that Airnode provides will carry over, say, it will be possible to implement a dAPI where the users assume all gas costs, which is not possible with the existing oracle solutions.

## API Integrations

When it comes to integrating APIs to oracles, we face a chicken-and-egg problem. If there is no existing demand for an API in an oracle ecosystem, nobody has the incentive to integrate it. If the API is not available because it's missing an integration, nobody is going to develop applications that could create the demand.

To reach its full potential, API3 will need hundreds, if not thousands, of first party oracles, so that it can easily set up new dAPIs or recompose existing ones. This can only be achieved if APIs can be integrated to Airnode in an even more scalable way. To this end, an improved version of the proprietary integration tools will be open sourced for Airnode. Borrowing from the [OpenAPI Specification format](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md), Oracle Integration Specifications (OIS) define the operations of an API, the endpoints of an oracle, and a way of mapping them to each other. Airnode users will be able to serve an API over their oracle simply by providing its OIS to their node. Integrations made in this standardized format will be very easy to collect, version and distribute.

OIS is a JSON file, primarily designed to describe the integration specifications for Airnode to use. This means that it does not aim to be human-readable first and creating it manually to specify an integration would be difficult. This problem will be solved by ChainAPI (a product from API3 currently in development), an integration platform that will allow users to generate OIS for their APIs through an easy-to-use graphical interface. This will be accompanied by other quality-of-life improvements for Airnode users, including a node dashboard and a marketplace to list their endpoints. As a result, API3 will have a wide selection of first-party oracles to compose dAPIs from and ecosystem growth will no longer be bottlenecked by integration capacity.
