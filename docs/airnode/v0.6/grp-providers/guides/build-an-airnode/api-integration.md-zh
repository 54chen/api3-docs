---
title: API 集成
---

<TitleSpan>创建一个 Airnode</TitleSpan>

# {{$frontmatter.title}}

<VersionWarning/>

<TocHeader /> <TOC class="table-of-contents" :include-level="[2,4]" />

API与Airnode的成功集成，需要彼此的接口映射。 这是用OIS（[Oracle集成规范](/ois/v1.0.0/ois.md)）json对象完成的，在config.json文件中可以找到，根据设计，其集成需遵循三个基本步骤。

- 指定 API 操作
- 指定了Airnode 端点
- Airnode 端点已映射到 API 操作

<!-- prettier-ignore-->
> ![api-integration-ois](../../../assets/images/api-integration-ois.png) <br/><br/>
> 
> <p class="diagram-line">config.json中的OIS对象，包含API操作与Airnode端点定义的映射信息。</p>
OIS是一个API操作的映射，如`GET /coins/{id}`，将其映射到Airnode端点。 当请求者合约调用AirnodeRrp.sol合同请求函数，如`makeFullRequest(..., callData) `时，呼叫数据被传达给链外的Airnode，Airnode使用OIS映射，将呼叫数据转化为适合API操作的有效HTTP请求。

将 API 集成到 Airnode，唯一需要做的就是在 Airnode 的 config.json 文件中创建一个 OIS 对象。 本指南是创建 OIS 对象的指导方法。 OIS 借鉴了 [OAS OpenAPI 规范](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md)的格式. 如果您有 OAS的经验，适应OIS起来也会很快。

::: tip OAS

然而，我们不建议在创建OIS对象时参考OAS的经验。 OIS只是借用了OAS的格式化做法。 创建OIS对象所需的一切，都在下列这些文档中。

:::

**使用本指南的小贴士：**

- 在另一个浏览器窗口中打开[OIS模板](../../../reference/templates/ois-json.md)，以便进行跟踪。
- 查看Airnode入门教程中的一个[Airnode config.json文件](../../../reference/examples/config-json.md)的例子。

## OIS 模板

OIS是一个json对象，作为 (`ois`) _键_添加到Airnode的[config.json](../../../reference/templates/config-json.md)文件中，有时也被称为_字段_。 你可以尝试使用[OIS模板](../../../reference/templates/ois-json.md)来构建一个OIS，并在以后将其添加到Airnode的config.json文件中。

在 OIS 模板中，一些字段包含 `{FILL_*}`。 这意味着添加的值是独立于其他字段的。 另一方面，如果两个字段包含相同的表达式（例如，`{FILL_OPERATION_PARAMETER_1_NAME}`) ，你必须在其中使用相同的值，因为它们是互相引用的。

OIS使用简化的OAS版本。 这意味着，如果你有要集成的API的OpenAPI规范，你就完成了80%，因为你可以复制粘贴整个部分（但要确保进行必要的修改，以符合OIS的格式）。

<!--
::: tip

If you already have an OAS file it may be possible to convert it to OIS. To
assist in converting between various specifications e.g. from OAS to OIS, there
is a `convert` command within the Airnode
[validator](../../../reference/packages/validator.md#convertor) package.

:::
-->

本指南将假设在没有要集成的API的OpenAPI规格时开展的操作。

<!--------------- STEP 1 ---------------->

## 第1步：指定OIS的定义

通过向OIS json对象的根目录添加三个描述性字段，开始构建OIS。

```json
{
  "oisFormat": "1.0.0",
  "title": "myOisTitle",
  "version": "0.1.0",
  ...
}
```

### oisFormat

将其保留为 `1.0.0`, 这是当前的 OIS 格式版本。

### title

这是该OIS的唯一标题。 注意，一个Airnode可以配置一个以上的OIS，并使用标题作为OIS的标识符。

### version

这是OIS的版本，可以对OIS的集成进行版本控制。 建议使用[semver](https://semver.org/)版本控制 最初的版本可以设置成`<0.1.0>`。

<!--------------- STEP 2 ---------------->

## 第2步：指定API

`apiSpecifications`字段用于描述API及其操作。

```json
"apiSpecifications": {
  "servers": [...],
  "paths": {...},
  "components": {...}
}
```

### Servers

指定你的API，第一步是在`apiSpecifications.servers[0].url`字段中输入其_baseUR_。 `apiSpecifications.servers`数组中只允许有一个对象（即 url）。 如果服务器有多 个元素，则会在转换期间引发警告。 此 baseURL 将适用于所有操作。

#### 选择基本 URL

考虑以下完整 URL 来执行返回所有已知令牌的 API 操作。

<!-- markdown-link-check-disable-next-line -->

> https://www.myapi.com/v1/tokens

有两种方式解决此问题。

<!-- markdown-link-check-disable-next-line -->

> **baseURL:** https://www.myapi.com
> 
> **path:** /v1/data

或者

<!-- markdown-link-check-disable-next-line -->

> **baseURL**: https://www.myapi.com/v1
> 
> **path:** /data

因为调用`baseURL+path`的结果，都是同一个完整的URL。

<!-- markdown-link-check-disable-next-line -->

将baseURL设置为你期望被所有操作共享的完整URL的部分。 从上面的例子来看，建议使用`https://www.myapi.com`，以备将来在API中添加以` /v2`开头的额外路径。 正如大家都知道的那样，API集成需要许多主观的选择，而且是艺术多于科学。

```json
"apiSpecifications": {
  "servers": [ // Only one element is allowed in the servers array.
    {
      "url": "https://www.myapi.com"
    }
  ],
  ...
}
```

### 路径

_paths_字段定义了所有的API操作，很像一个OpenAPI规范文件。

_什么是API操作？_

> An API operation is specified as a unique combination of a _**path**_ and an HTTP _**method**_. `GET /token/{id}`

#### Operations

In the examples below, `GET` refers to an [HTTP request method](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods). This implies that you could have another API operation that can be specified using a different method but the same path.

> path: /data
> 
> method: GET

> path: /data
> 
> method: POST

Therefore, a path is not enough to specify an API operation by itself, you must also provide a method. If a new path is needed then it must start a new object in paths with its own methods. Currently only the GET and POST methods are supported by Airnode.

With regards to the [OIS template](../../../reference/templates/ois-json.md), the name of the element (denoted as `{FILL_PATH}`) should be replaced with the path (e.g., `/data`). Similarly, `{FILL_METHOD}` should be replaced with the method of the operation you want to integrate (e.g., `get`). The method must be lowercase.

The following example illustrates three operations, `GET /data`, `POST /data`, `GET /tokens`.

```json
"paths": {
  "/data": {   // path    {FILL_PATH}
    "get": {   // method  {FILL_METHOD}
      ...      // parameters
    },
    "post": {  // method  {FILL_METHOD}
      ...      // parameters
    }
  },
  "/tokens": { // path    {FILL_PATH}
    "get": {   // method  {FILL_METHOD}
      ...      // parameters
    }
  }
}
```

#### Parameters (operation)

After specifying the path and method of an API operation, the final step is to specify its parameters. Each parameter is an object in the `apiSpecifications.paths.{PATH}.{METHOD}.parameters` array, with the fields `in` and `name`. `in` tells where the parameter goes in the HTTP request and `name` tells the name that the parameter value will be sent under. Currently Airnode supports the following parameter types for use with `in`.

- query
- header
- path
- cookie

When integrating a POST method, define the body parameters with `in: query`. Airnode will convert all `query` types into the `requestBody`. Note that only the non-nested application/json content-type is supported.

It is not necessary to specify all API operation parameters, but only the ones the on-chain requester will need to be able to provide (see Airnode endpoint [parameters](./api-integration.md#parameters)), and the ones that you want to hard-code a value for (see Airnode endpoint [fixed operation parameters](./api-integration.md#fixedoperationparameters)).

```json
"paths": {
  "/data/{id}": {
    "get": {
      "parameters": [
        {
          "in": "path",
          "name": "id"
        },
        {
          "in": "header",
          "name": "Accept"
        }
      ]
    }
  }
}
```

_Example: Get a token_

The `GET /token/{id}` returns a token using the token's `id` which is a `path` parameter.

| Method | Path        | in   | name |
| ------ | ----------- | ---- | ---- |
| GET    | /token/{id} | path | id   |

_Example: Create a token_

The `POST /token` operation accepts three parameters. The name and description of the token are placed in the type `query` and will be moved by Airnode to the requestBody upon calling the API operation. The third is a `header` parameter that describes the Content-Type of the request such as `application/json` or `application/x-www-form-urlencoded`.

| Method | Path   | in     | name        |
| ------ | ------ | ------ | ----------- |
| POST   | /token | query  | name        |
|        |        | query  | description |
|        |        | header | Accept      |

_Example: Get all tokens_

The `GET /tokens` returns a list of all tokens. The list count can be limited using the `limit' parameter which the API operation considers as optional since it will not return an error if omitted.

> `GET /tokens` returns all tokens.
> 
> `GET /tokens?limit=10` returns the first ten tokens.

| Method | Path    | in    | name  |
| ------ | ------- | ----- | ----- |
| GET    | /tokens | query | limit |

<!--------------- STEP 1 ---------------->

## Step 3: Specifying Airnode Endpoints

An Airnode endpoint is a service that Airnode exposes to on-chain requesters. It maps to an API operation, but the nature of this mapping is customizable. It is the integrator's job to define what this service is.

For example, if your API operation returns an asset price given its ticker (e.g., `BTC`), you can specify the endpoint such that the requester provides the ticker as a parameter. The resulting endpoint would be a general one that returns prices for any kind of asset. On the other hand, you can hardcode `BTC` as the asset whose price will be returned (using [fixed operation parameters](./api-integration.md#fixedoperationparameters)), which would make your endpoint a specific one that only returns the BTC price.

The recommended endpoint definition pattern is to create an Airnode endpoint for each API operation, and allow the requesters to provide all operation parameters themselves. This results in optimal flexibility, and essentially allows the requesters to use the entire API functionality on-chain. Normally, oracle integrations strive to hard-code as many API parameters as possible because passing these parameters on-chain results in a gas cost overhead. However, the Airnode protocol uses [templates](../../../concepts/template.md) (not to be confused with the OIS template used for this guide), which allow requesters to specify a large number of endpoint parameters at no additional gas cost.

Note that there are some cases where you may not want to map endpoints to API operations one-to-one. For example, an API operation can have a `header` parameter, `Accept`, that can take the values `application/json` or `applicatino/xml` to determine how to format the data that the API will respond to the call. Airnode expects responses to be in JSON format, and thus hard-coding this parameter as `JSON` would be more suitable than letting the requester decide, as there is only one valid choice. Again, the integrator's job is to be aware of these subtleties and use judgement.

After this brief detour, let us get back to filling in our OIS template.

### Endpoints

The field `endpoints` is an array, with each row representing an Airnode endpoint. The first field you need to fill in is `name`. Make sure that it is descriptive and unique from other endpoint names. If you are integrating API operations to Airnode endpoints one-to-one, using the API operation path as the endpoint name is a decent choice (i.e., `/token`). Note that you would also add the method to this name if there were multiple operations with different methods for a single path (i.e., `GET/token`).

The next step is to fill in `operation` object. Here, you need to enter the `path` and `method` of an API operation you have defined in `apiSpecifications.paths`, resulting in the Airnode endpoint calling the now linked API operation.

#### fixedOperationParameters

It is not uncommon to hard-code API parameters (recall the `Accept` operation parameter in the above example). Such hard-coded parameters are called `fixedOperationParameters`.

In the OIS template there is a fixed operation parameter under `endpoints[n].fixedOperationParameters`, and it refers to the first API operation parameter. This means that whenever the Airnode receives a request for this endpoint, the respective API call will be made with that API operation parameter set to
<code style="overflow-wrap:break-word;">endpoints[n].fixedOperationParameters[n].value</code>. The requester does not supply a value for `fixedOperationParameters`.

An Airnode endpoint can have multiple `fixedOperationParameters`. An API operation parameter cannot be in both `endpoints[n].fixedOperationParameters` and `endpoints[n].parameters`.

#### reservedParameters

The requester can provide some parameters that are not mapped to API operation parameters. These parameters are called "reserved parameters", and their names start with an underscore. See the [related OIS docs](/ois/v1.0.0/ois.md#_5-4-reservedparameters) for more information.

The current list of reserved parameters are `_type`, `_path` and `_times`. See [Reserved Parameters](/ois/v1.0.0/reserved-parameters.md) in the OIS document set to understand what each of these parameters are for. In most cases, all three should be defined as reserved parameters with no fixed/default values, as doing so provides the requester with the most flexibility.

#### parameters

Airnode endpoint parameters map to API operation parameters that the requester is allowed to provide values for. It refers to an API operation through its field `operationParameter`. You can also provide `default` values for endpoint parameters, though this is not recommended in most cases.

Endpoint parameters have a `name` field, which does not have to be the same as the API operation parameter that they map to. As a separate note, an Airnode endpoint can have multiple parameters.

## Conclusion

The API operations and Airnode endpoints are now specified. Each Airnode endpoint maps to an API operation, and each Airnode endpoint parameter or fixedOperationParameter maps to an API operation parameter. The resulting OIS includes no user-specific information, which means that you can share it for others to easily provide the same services (for example, to set up a third-party oracle network).

Note that there was some subjectivity while defining the Airnode endpoints. This means that two different OISes can exist for the same exact API, differing based on how the integrators designed the interface that the requester will use. However, in most cases, one would simply map API operations to Airnode endpoints directly, and let the requester provide all API operation parameters through the Airnode endpoint parameters.

Now that you have an OIS object, the next step is [API Security](api-security.md).
