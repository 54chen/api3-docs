---
title: 使用授权者(可选)
---

<TitleSpan>创建一个 Airnode</TitleSpan>

# {{$frontmatter.title}}

<VersionWarning/>

<TocHeader /> <TOC class="table-of-contents" :include-level="[2,3]" />

Airnode可以使用[授权者](../../../concepts/authorization.md)，授权请求者合约访问其底层API。 这种方法是在链上操作的，需要API供应商具备一些区块链知识。

[授权者](../../../concepts/authorization.md)是一个合约，它通常检查一个单一的条件（"请求者是否已经支付了他们的月费"，"这个`requesterAddress`是否被列入白名单"，等等）。 授权者可以被组合起来以执行更复杂的策略。 如果列表中的任何一个授权者给予访问权，该请求将被认为是已授权的。 从逻辑的角度看，授权结果得到**OR**。

::: tip 备选方案：中继的元数据

作为授权者的替代品，API提供者可以使用[中继元数据](./api-security.md#relayed-meta-data-security-schemes)来验证请求。 这种方法是链外的，不需要API供应商的区块链知识。 请注意，有可能同时使用授权者和中继元数据。

:::

When you deploy your Airnode a receipt file is generated which contains the Airnode's `airnodeAddress`. Sponsors (via their sponsored requesters) use `airnodeAddress` and an `endpointId` to make requests to your Airnode's endpoints. However, you probably do not want to serve them publicly.

- Only serve your own [requester contracts](../../../grp-developers/requesters-sponsors.md).
- Only serve sponsors who have made a subscription payment.
- Only serve sponsors who have gone through KYC.

You can use different authorizers contracts for your Airnode deployment per chain by declaring them in the `config.json` file under `chains[n].authorizers`. Add a list of authorizer contracts addresses for each chain. If the `chains[n].authorizers` array is left empty then all requests will be accepted by the Airnode but still could be filtered by the second method of authorization, [relay security schemes](./apply-auth.md#relay-security-schemes).

```json
{
 ...
 "chains":[
    {
      "id": "1",
      ...
      "authorizers": [  // Requests must satisfy at least one contract
        "0xeabb...C123",
        "0xCE5e...1abc"
      ]
    },
    {
      "id": "2",
      ...
      "authorizers": [], // All requests will be processed
    },
    {
      "id": "3",
      ...
      "authorizers": [   // Requests must satisfy one contract
        "0xeabb...C123"
      ]
    },
   ]
 }
}
```

The authorizers you use will authorize all requests regardless of which endpoint is called. Endpoints are declared in the `ois.endpoints` field of the `config.json` file. To further filter by a particular endpoint you must use an authorizer like RequesterAuthorizerWithAirnode.

## RequesterAuthorizerWithAirnode

A common use case for an authorizer is the [RequesterAuthorizerWithAirnode](../../../concepts/authorization.md#requesterauthorizerwithairnode) authorizer contract developed for Airnode operators to use right out-of-the-box. It allows the whitelisting of requester contracts (with or without expiration timestamps) on a per endpoint basis. This is the most common use case and may in fact satisfy the needs of many Airnodes. You can find the contract address of this authorizer in the [Airnode Contract Addresses](../../../reference/airnode-addresses.md) doc.

To use the RequesterAuthorizerWithAirnode authorizer:

1. Add the authorizer contract address to the `chains[n].authorizers[]` array.
2. After your Airnode is deployed, call the Admin CLI command [set-whitelist-expiration](../../../reference/packages/admin-cli.md#set-whitelist-expiration) to add the desired requester contract addresses to the whitelist maintained by RequesterAuthorizerWithAirnode.

Once implemented, only requester contract addresses you have added to RequesterAuthorizerWithAirnode will have access to your Airnode.
