---
title: 配置 Airnode
---

<TitleSpan>创建一个 Airnode</TitleSpan>

# {{$frontmatter.title}}

<VersionWarning/>

<TocHeader /> <TOC class="table-of-contents" :include-level=[2,5] />

::: tip 在部署Airnode之前完成以下工作。

- [API 集成](api-integration.md)
- [API 安全性](api-security.md)

[<InfoBtnGreen/>](../../../reference/deployment-files/config-json.md) 这个图标链接到参考部分的其他领域信息。

:::

Airnode的部署或重新部署使用其`config.json`和`secrets.env`文件的配置值。 `config.json`指定了[Oracle集成规范OIS](/ois/v1.0.0/ois.md)和其他具体的配置细节。 `secrets.env`文件包括秘密信息，如API密钥和链供应商的URL，它们在config.json文件中使用插值引用。

> ![config-json](../../../assets/images/config-json.png)
> 
> - <p class="diagram-line"><b>config.json</b>文件在Airnode的部署/重新部署期间被用来配置其行为，并提供API操作的映射。</p>
> - <p class="diagram-line"><b>secrets.env</b>文件持有必须保密的config.json的值。</p>
> - <p class="diagram-line"><b>aws.env</b>文件为针对AWS的部署保存AWS凭证。</p>
> - <p class="diagram-line"><b>gcp.json</b>文件持有针对GCP的部署的GCP凭证。</p>

在阅读本文档时，下面的示例文件很有用。

- [config.json](../../../reference/examples/config-json.md)
- [secrets.env](../../../reference/examples/secrets-env.md)
- [aws.env](../../../reference/examples/aws-env.md)

## 创建`config.json`

使用[config.json](../../../reference/templates/config-json.md)模板来建立你自己的Airnode配置文件，或改变[config.json示例](../../../reference/examples/config-json.md)文件。 `config.json`中有五个根级字段。

- [chains](./configuring-airnode.md#chains)
- [nodeSettings](./configuring-airnode.md#nodesettings)
- [triggers](./configuring-airnode.md#triggers)
- [ois](./configuring-airnode.md#ois)
- [apiCredentials](./configuring-airnode.md#apicredentials)

### chains

`chains`数组中的每一行都代表Airnode将服务的以太坊区块链，由`id`标识。 目前，Airnode只支持以太坊区块链，以`type: "evm"`表示。 这几个支持的区块链，在[Airnode合约地址](../../../reference/airnode-addresses.md)文档中可以看到它们。 你可以为每条链使用多个链供应商，并声明多个链，每个链有一个或多个供应商。 请看_概念和定义_中的[链供应商](../../../concepts/chain-providers.md)。

下面是一个简单的链数组，只有一个链供应商。

```json
"chains": [
  {
    "maxConcurrency": 100,
    "authorizers": [
      "0x5Fgh48...3F6f64180acc"
    ],
    "contracts": {
      "AirnodeRrp": "0xF6d267546...BC9A384fa418"
    },
    "id": "4",
    "options": {
      "txType": "eip1559",
      "priorityFee": {
        "value": 3.12,
        "unit": "gwei"
      },
      "baseFeeMultiplier": 2
    },
    "providers": [
      "infura_rinkeby": {
        "url": "${INFURA_RINKEBY_PROVIDER_URL}"
      }
    ],
    "type": "evm",
    "blockHistoryLimit": 300,
    "minConfirmations": 0,
    "ignoreBlockedRequestsAfterBlocks": 20
  }
],
```

#### maxConcurrency

[<InfoBtnGreen/>](../../../reference/deployment-files/config-json.md#maxconcurrency) Airnode被设计成可以随着请求的数量而扩展。 为了实现这一目标，它在必要时产生了新的云函数（称为处理程序），这些处理程序并行运行。

最大并发数指定了每个单一的Airnode调用的最大并发处理程序数量。 Airnode 保留 ([AWS](https://docs.aws.amazon.com/lambda/latest/operatorguide/reserved-concurrency.html)) 并限制 ([AWS](https://docs.aws.amazon.com/lambda/latest/operatorguide/reserved-concurrency.html), [GCP](https://cloud.google.com/functions/docs/configuring/max-instances)基于此字段生成的云函数 个数。 如果你想禁用这种行为，请看一下 [cloudProvider](#cloudprovider) 部分中的 `disableConcurrencyReservations` 字段。

如果您将此字段设置为值 X，则 Airnode 将保证：

- 最多对 API 进行 X 次 api 调用
- 最多 X 笔交易（由区块链供应商进行）将由相应链的区块链供应商进行

这样做时，Airnode 将计算所有区块链供应商报告的请求总数。 如果这个数字超过了最大并发限制，它将开始丢弃来自请求数最多的区块链供应商的最新请求，直到其数量低于限制。

例如，如果`maxConcurrency`设置为5，有三个供应商（A、B和C），他们报告了以下请求：

- A1、A2、A3、A4和A5
- B1, B2 和 B3
- C1 和 C2

上述例子导致下列请求：A1、A2、B1、B2和C2。 请注意，两个供应商都没有超过2个请求，但这仍然不足以满足限制，所以C2请求也被放弃。

::: warning

请注意，这一限制只适用于在链上提出的请求。 例如，使用 HTTP 网关发起的请求不包含在这个限制中。

还要注意的是，这个限制是按链来配置的，不同链的限制是互不相关的。

:::

#### authorizers

[<InfoBtnGreen/>](../../../reference/deployment-files/config-json.md#authorizers) Airnode部署将在链上设置的授权者合同地址列表。 更多信息请参见[授权](../../../concepts/authorization.md)文档。

#### contracts

[<InfoBtnGreen/>](../../../reference/deployment-files/config-json.md#contracts) 包含执行Airnot协议的合约地址。 虽然您可以自己部署这些合约，但建议您使用 API3 部署的合约。 您可以在上面的列表中找到它们。

#### id

[<InfoBtnGreen/>](../../../reference/deployment-files/config-json.md#id) 一个 Airnode 可以同时服务多个链。 在`id`中设置所需链的ID（例如，Rinkeby测试网络为`4`）。 见[Airnode合约地址](../../../reference/airnode-addresses.md)文档中支持的链的列表。 查看 [参考章节](../../../reference/deployment-files/config-json.md#id) 中的附加定义。

#### providers

[<InfoBtnGreen/>](../../../reference/deployment-files/config-json.md#providers) Airnode 可以每个链中使用多个Ethereum 供应商。 它们可以是私有的以太节点，或者是以太为基础的服务供应商，例如Infura。 因此， `providers` 字段是一个允许多个Ethereum 供应商的列表。 输入用户定义的 `name` 来识别提供者和提供者的 URL， 通常将其保留在 `secrets.env`文件中。 名称用于日志中。

#### type

[<InfoBtnGreen/>](../../../reference/deployment-files/config-json.md#type) 链的类型。 目前只支持 `evm`。 查看 [参考章节](../../../reference/deployment-files/config-json.md#type) 中的附加定义。

#### options

[<InfoBtnGreen/>](../../../reference/deployment-files/config-json.md#options) 配置链相关选项的对象。

- txType：要使用的交易类型。
- priorityFee：配置 EIP-1559 优先费用的对象。
- baseFeeMultiplier：将 EIP-1559 基本费用配置为最大费用乘数。

#### blockHistoryLimit

[<InfoBtnGreen/>](../../../reference/deployment-files/config-json.md#blockhistorylimit) Airnode部署应搜索请求的过去区块的数量。 默认为`300`（对Ethereum来说大概是1小时）。

#### minConfirmations

[<InfoBtnGreen/>](../../../reference/deployment-files/config-json.md#minconfirmations) 请求被视为有效所需的确认数量。 默认值为：`0`。

#### ignoreBlockedRequestsAfterBlocks

[<InfoBtnGreen/>](../../../reference/deployment-files/config-json.md#ignoreblockedrequestsafterblocks) 节点需要通过的块数，以便开始忽略被阻止的请求。 默认值为：`20`。

### nodeSettings

`nodeSettings`字段持有特定于节点（Airnode）的配置参数。

```json
{
"nodeSettings": {
    "cloudProvider": {
      "type": "aws",
      "region": "us-east-1",
      "disableConcurrencyReservations": false
    },
    "airnodeWalletMnemonic": "${AIRNODE_WALLET_MNEMONIC}",
    "heartbeat": {
      "enabled": true,
      "apiKey": "${HEARTBEAT_API_KEY}",
      "id": "${HEARTBEAT_ID}",
      "url": "${HEARTBEAT_URL}"
    },
    "httpGateway": {
      "enabled": true,
      "apiKey": "${HTTP_GATEWAY_API_KEY}",
      "maxConcurrency": 20
    },
    "httpSignedDataGateway": {
      "enabled": true,
      "apiKey": "${HTTP_SIGNED_DATA_GATEWAY_API_KEY}",
      "maxConcurrency": 20
    },
    "logFormat": "plain",
    "logLevel": "INFO",
    "nodeVersion": "0.6.0",
    "stage": "dev"
  },
```

#### cloudProvider

[<InfoBtnGreen/>](../../../reference/deployment-files/config-json.md#cloudprovider) 表示Airnode应该被部署在哪个云提供商上，以及其配置。 目前有三个选项：`AWS`、`GCP`（使用[docker deployer-image](../../docker/deployer-image.md)部署）和`local`（使用[docker client-image](../../docker/client-image.md)部署）。

- type: 云供应商类型。 该值可以是 `aws`, `gcp` 或 `local`。
- region: (仅限AWS和GCP）指的是Airnode将被部署在云提供商的哪个区域。 AWS 的示例值为 `us-east-1`。 当使用GCP时，使用[**区域** 而不是位置](https://cloud.google.com/compute/docs/regions-zones)。 请注意，目前将部署从一个地区转移到另一个地区并非易事（即它不像部署那样需要一条命令，而是需要三条）。 因此，尽量选择一个地区，并为这个特定的部署坚持下去。
- disableConcurrencyReservations: (仅AWS和GCP) 禁用生成的云函数（所有这些功能，包括HTTP网关）的并发量预留。 欲了解更多信息，请参阅 [`maxConcurrency`](#maxconcurrency) 部分。
- projectId: (仅限GCP) GCP 项目的 ID, Airnode 将在 下部署。

在[云资源](../../../reference/cloud-resources.md)文档中了解更多关于Airnode使用的AWS或GCP资源。

#### airnodeWalletMnemonic

[<InfoBtnGreen/>](../../../reference/deployment-files/config-json.md#airnodewalletmnemonic) API提供者提供一个助记符，作为Airnode的BIP 44钱包，Airnode的[地址](../../../concepts/airnode.md#airnodeaddress)将从该钱包中导出。 它不需要为钱包提供资金来运行Airnode，但必须提供资金来宣布链上Airnode的[xpub](../../../concepts/airnode.md#xpub)，这是可选的。

#### heartbeat

[<InfoBtnGreen/>](../../../reference/deployment-files/config-json.md#heartbeat) 在Airnode每次运行结束时（每分钟），Airnode可以向一个指定的URL发出HTTP POST请求。 这既是一个信号，表明Airnode是活的和工作的（特别是在部署后很有用），也是为了发送其运行的一些指标。 通过设置config.json中nodeSettings.heartbeat部分的所有字段来开启heartbeat 功能。 更多信息请参阅 [Heartbeat](./heartbeat.md) 文档。

- (required) - 使用 true/false启用/禁用Airnode的heartbeat。
- url: 进行heartbeat请求的URL。
- apiKey: 用来验证heartbeat URL的API密钥。
- id: 用于核算的Airnode heartbeat ID。.

#### httpGateway

[<InfoBtnGreen/>](../../../reference/deployment-files/config-json.md#httpgateway) 该网关允许在不访问区块链的情况下请求定义的端点。 查看 [HTTP 网关](./http-gateways.md) doc 获取更多信息。

- (必须) - 使用 true/false启用/禁用Airnode访问 HTTP网关。
- apiKey: 用户定义的 API 密钥来验证网关。 密钥长度必须介于 30 - 120 个字符之间。
- maxConcurrency: （可选）一个大于零的数字，表示同时运行的为 HTTP 网关请求提供服务的无服务器函数的最大数量。 省略时，没有最大并发设置。

#### httpSignedDataGateway

[<InfoBtnGreen/>](../../../reference/deployment-files/config-json.md#httpsigneddatagateway) 该网关允许在不访问区块链的情况下请求定义的端点。 响应将被签名，可以提交到区块链。 请参阅 [HTTP 网关](./http-gateways.md) doc 获取更多信息。

- enabled: 使用 true/false启用/禁用Airnode访问 HTTP网关。
- apiKey: 用户定义的 API 密钥来验证网关。 密钥长度必须介于 30 - 120 个字符之间。
- maxConcurrency: （可选）一个大于零的数字，表示同时运行的为 HTTP 网关请求提供服务的无服务器函数的最大数量。 当省略时，没有设置最大并发数。

#### logFormat

[<InfoBtnGreen/>](../../../reference/deployment-files/config-json.md#logformat) 设置两个可能的日志格式中的一个。

- json
- plain

#### logLevel

[<InfoBtnGreen/>](../../../reference/deployment-files/config-json.md#loglevel) 设置四个可能日志级别中的一个。

- DEBUG
- INFO
- WARN
- ERROR

#### nodeVersion

[<InfoBtnGreen/>](../../../reference/deployment-files/config-json.md#nodeversion) 在表格 `#.#.#`中，此字段表示这个节点 (Airnode) 版本 `config.json` 已准备就绪。 由于`config.json`的格式会随着节点版本的变化而变化，所以在另一个Airnode版本中使用为一个Airnode版本准备的`config.json`可能会导致意外的问题。 See the [Releases page of the Airnode repo](https://github.com/api3dao/airnode/releases) for available versions.

#### stage

[<InfoBtnGreen/>](../../../reference/deployment-files/config-json.md#stage) This field allows the deployment of multiple Airnodes with the same provider ID. For example, the same Airnode may have multiple deployments with `stage` set to a different value (dev, public, prod). `stage` cannot be longer than 16 characters and can only include lowercase alphanumeric characters (`a–z`, `0–9`) and hyphens (`-`).

#### skipValidation

[<InfoBtnGreen/>](../../../reference/deployment-files/config-json.md#skipvalidation) This is an optional attribute which decides whether Airnode validates the config.json during deployment or when run in a docker. Possible values are `true` and `false`. By default, this flag is set to `false`.

### triggers

The `triggers` field allows you to expose Airnode endpoints from an OIS selectively for the RRP protocol or via the HTTP gateway. For example, your OIS may include 10 endpoints, but you may only want to serve 2 for RRP and all 10 for the gateway.

List the endpoints that you want to serve with the request–response protocol (RRP) under `triggers.rrp`. List the endpoints that you want to serve with the HTTP gateway under `triggers.http`. List the endpoints which can be used to get the signed data in `triggers.httpSignedData`. In most cases, you would create a trigger for each endpoint in your OIS object.

```json
"triggers": {
    "rrp": [
      {
        "endpointId": "0xf10f067e716dd8b9c91b818e3a933b880ecb3929c04a6cd234c171aa27c6eefe",
        "oisTitle": "CoinGecko Requests",
        "endpointName": "coinGeckoMarketData"
      }
    ],
    "http": [
      {
        "endpointId": "0xf10f067e716dd8b9c91b818e3a933b880ecb3929c04a6cd234c171aa27c6eefe",
        "oisTitle": "CoinGecko Requests",
        "endpointName": "coinGeckoMarketData"
      }
    ],
    "httpSignedData": [
      {
        "endpointId": "0xf10f067e716dd8b9c91b818e3a933b880ecb3929c04a6cd234c171aa27c6eefe",
        "oisTitle": "CoinGecko Requests",
        "endpointName": "coinGeckoMarketData"
      }
    ]
  },
```

`rrp`, `http` and `httpSignedData` require an `endpointId` which can be derived from the `oisTitle` and `endpointName`, use the CLI command [derive-endpoint-id](../../../reference/packages/admin-cli.md#derive-endpoint-id).

#### rrp

[<InfoBtnGreen/>](../../../reference/deployment-files/config-json.md#rrp) An array of endpoints from OIS that the Airnode will respond to for the RRP protocol. Only endpoints listed here will be served through the RRP protocol [AirnodeRrp.sol](../../../concepts/airnode.md).

- oisTitle & endpointName: Each trigger has an `oisTitle` and `endpointName` that allow you to refer to one of the endpoints in an OIS object. Remember that an Airnode's config.json file can have more than one OIS object.

- endpointId: Add an `endpointId` to the trigger which is the ID that a requester will use for on-chain requests to reference a specific trigger. Use the admin CLI command [derive-endpoint-id](../../../reference/packages/admin-cli.md#derive-endpoint-id) to derive endpoint IDs using the `oisTitle` and `endpointName`.

#### http

[<InfoBtnGreen/>](../../../reference/deployment-files/config-json.md#http) An array of endpoints from OIS that the Airnode will respond to for the HTTP gateway. Only endpoints listed here can be tested via the HTTP gateway.

- oisTitle & endpointName: Each trigger has an `oisTitle` and `endpointName` that allow you to refer to one of the endpoints in an OIS object. Remember that an Airnode's config.json file can have more than one OIS object.

- endpointId: Add an `endpointId` to the trigger which is the ID that a requester will use for on-chain requests to reference a specific trigger. Use the admin CLI command [derive-endpoint-id](../../../reference/packages/admin-cli.md#derive-endpoint-id) to derive endpoint IDs using the `oisTitle` and `endpointName`.

#### httpSignedData

[<InfoBtnGreen/>](../../../reference/deployment-files/config-json.md#httpsigneddata) An array of endpoints from OIS that the Airnode will respond to for the signed data requests. Only endpoints listed here can be called to provide the signed data.

- oisTitle & endpointName: Each trigger has an `oisTitle` and `endpointName` that allow you to refer to one of the endpoints in an OIS object. Remember that an Airnode's config.json file can have more than one OIS object.

- endpointId: Add an `endpointId` to the trigger which is the ID that a requester will use for on-chain requests to reference a specific trigger. Use the admin CLI command [derive-endpoint-id](../../../reference/packages/admin-cli.md#derive-endpoint-id) to derive endpoint IDs using the `oisTitle` and `endpointName`.

### ois

The `ois` field is a list OIS objects that Airnode will be serving. This means that a single instance of an Airnode can serve multiple APIs. You can simply copy paste OIS objects that you will be serving into the `ois` list. Use the previous guide [API Integration](api-integration.md) to create an OIS object.

### apiCredentials

Each entry in `apiCredentials` maps to a security scheme defined in an OIS (`ois[n].components.securitySchemes.{securitySchemeName}` and `ois[n].security`), where `oisTitle` is the `title` field of the related OIS, and `securitySchemeName` is the name of the respective security scheme. These would be `myOisTitle` and `mySecurityScheme` in the example below. `securitySchemeValue` is the value used for the authentication with the security scheme (e.g., the API key).

Use of apiCredentials is not required, leave its array empty if you don't need any security scheme.

```json
// apiCredentials
[
  {
    "oisTitle": "myOisTitle",
    "securitySchemeName": "mySecurityScheme",
    "securitySchemeValue": "${SS_MY_API_KEY}"
  }
]

// From the OIS object apiCredentials is referencing
// using the oisTitle/securitySchemeName pair.
{
  "title": "myOisTitle",
  ...,
  "components": {
    "securitySchemes": {
      "mySecurityScheme": {
        "in": "header",
        "type": "apiKey",
        "name": "X-api-key"
      }
    }
  },
  "security":{
    "mySecurityScheme": []
  }
  ...
}
```

#### `oisTitle`

[<InfoBtnGreen/>](../../../reference/deployment-files/config-json.md#oistitle) The `ois.title` of the OIS where the `securitySchemeName` can be found.

#### `securitySchemeName`

[<InfoBtnGreen/>](../../../reference/deployment-files/config-json.md#securityschemename) The name of a security scheme from `ois[n].components.securitySchemes.{securitySchemeName}`.

#### `securitySchemeValue`

[<InfoBtnGreen/>](../../../reference/deployment-files/config-json.md#securityschemevalue) The value of the security scheme used (as defined by `ois[n].components.securitySchemes.{securitySchemeName}` for the authentication. Usually stored in `secrets.env`.

Based on the setup above Airnode will call the API operation with the following header.

```json
headers: {
  "X-api-key": "834989348HHGTDS_8754",
}
```

## Creating `secrets.env`

The `secrets.env` file contains values (secrets) such as blockchain provider urls, chain provider urls, etc. These secrets are embedded in [config.json](../../../reference/deployment-files/config-json.md) using interpolation.

```json
// Sample interpolation value from config.json
"httpGateway": {
  "enabled": true,
  "apiKey": "${HTTP_GATEWAY_API_KEY}"
},

// Sample variable in secrets.env
// Variable names cannot contain dashes (-).
HTTP_GATEWAY_API_KEY="FRACZKMH4F32BZ8X5uTd"
```

Use the [secrets.env](../../../reference/templates/secrets-env.md) template and refer to [Reference > Deployment Files > secrets.env](../../../reference/deployment-files/secrets-env.md) as needed.

## AWS setup (AWS deployment only)

When it is time to deploy the Airnode to AWS, the Docker [deployer image](../../docker/deployer-image.md) will need the AWS credentials to build the node on AWS Lambda.

### Creating `aws.env` (AWS only)

Follow [this video](https://www.youtube.com/watch?v=KngM5bfpttA) if needed. It will show you how to create an IAM user and get security credentials. Put them in the `aws.env` file as shown below. See an [example file](../../../reference/templates/aws-env.md) in the reference section.

- Do not place double quotes (") around the value of each variable.
- Variable names cannot contain dashes (-).

```bash
AWS_ACCESS_KEY_ID=XYZ...123
AWS_SECRET_ACCESS_KEY=ABC7...89
```

## GCP setup (GCP deployment only)

When it is time to deploy the Airnode to GCP, the Docker [deployer image](../../docker/deployer-image.md) will need the GCP project ID to build the Airnode.

### Creating a GCP project

First, you need to [create a GCP project](https://cloud.google.com/resource-manager/docs/creating-managing-projects) under which will the Airnode be deployed. Once the project is created, insert its [projectId](./configuring-airnode.md#cloudprovider) into your `config.json`.

### Enable required API

In order for Airnode to deploy successfully, you need to enable [App Engine Admin API](https://console.cloud.google.com/apis/library/appengine.googleapis.com) for your GCP project. After enabling it, wait a few minutes before the deployment itself so the change will take place.

### Creating a Service Account

Create a new service account from the [Service accounts](https://console.cloud.google.com/iam-admin/serviceaccounts) menu. Grant this service account access to the project by adding a role `Owner` during the creation process.

Once the account is created, add a new access key of type JSON for this account. Download the key file as `gcp.json` into the root of your project.

## Summary

In this guide you created the `config.json`, `secrets.env` and obtained cloud provider credentials required to deploy an Airnode to a cloud provider. Note that `config.json` is user-specific and therefore it is not much use to others.

The `secrets.env`, `aws.env` and `gcp.json` files contains keys, chain provider urls and security credentials, so they should be kept secret. Make sure that you do not push your credentials to a repository or otherwise expose them as these credentials can be used to gain access to your Airnode's private key, AWS account or GCP account.

The next three steps in this guide are optional.

- [Using Authorizers](./apply-auth.md) optional
- [Heartbeat](./heartbeat.md) optional
- [HTTP Gateways](./http-gateways.md) optional
