---
title: 调用Airnode
---

<TitleSpan>开发者</TitleSpan>

# {{$frontmatter.title}}

<VersionWarning/>

<TocHeader /> <TOC class="table-of-contents" :include-level="[2,3]" />

请求者是一个可以触发Airnode 请求的合约。 要做到这一点，请求者需要被赞助，并使用匹配的赞助者 钱包提出请求。 查看 [Requesters and Sponsors](requesters-sponsors.md)章节，了解如何赞助请求者，并获取赞助者钱包。

Airnode 由两个部分组成：链下 **Airnode**(例如 "节点")已部署为自托管或云端提供功能，例如AWS)，以及链上的 **协议合约** AirnodeRrp.sol。 请求者调用协议合约，发出带有请求参数的区块链事件。 Airnode 监听AirnodeRrp 合约释放的事件。 在下一个运行周期，Airnode从发出的事件中获得请求参数。 下图和为开发者准备的[Overview](./) 文档中的图表说明了整个过程的机制。

AirnodeRrp协议的设计是灵活的，意在为各种不同的使用案例服务。 关于潜在的设计模式，参见Airnode[requester examples](https://github.com/api3dao/airnode/tree/v0.5/packages/airnode-examples/contracts)的例子。

忽略整个过程的机制，请求者调用 Airnode 主要集中于两个任务， 以下图表中点A & B所示。

- <span style="color:green;font-weight:bold;">1</span>: 发出请求
- <span style="color:blue;font-weight:bold;">2</span>: 接受并解码 回应

> ![request-flow](../assets/images/call-an-airnode.png)
> 
> 1. <p class="diagram-line" style="color:green;">请求者向AirnodeRrp合同提出请求，将 <code>requestId</code> 添加到存储，将请求发送到事件日志，并将 <code>requestId</code> 退回请求者。 在下一个运行周期，Airnode 将检索这个请求。 然后，它通过检查分配给Airnode的授权者合约，验证请求者是否得到授权。</p>
> 2. <p class="diagram-line" style="color:blue;">如果请求获得授权，Airnode 开始响应。 它首先从API收集请求的数据，并调用AirnodeRrp中的<code>fulfill()</code>函数，该函数从存储中删除待定的 <code>requestId</code> ，并对<code>myFulfill()</code>进行回调。 与相应有关的gas费用>由请求者的赞助者承担。</p>

本文档以下部分讨论了请求者的实施、部署和赞助。

## 步骤 #1: 继承RrpRequestter.sol

A requester inherits from the [RrpRequester.sol](https://github.com/api3dao/airnode/blob/v0.5/packages/airnode-protocol/contracts/rrp/requesters/RrpRequester.sol) contract. 这将向请求者公开AnnodeRrp.sol协议合约，允许其提出Annode请求。

```solidity
import "@api3/airnode-protocol/contracts/rrp/requesters/RrpRequester.sol";

contract MyRequester is RrpRequester {
  ...
  constructor (address airnodeRrpAddress)
      public
      RrpRequester(airnodeRrpAddress)
  {}
  ...
}
```

注意构造函数参数`airnodeRrpAddress`，它是你想使用的区块链上AirnodeRrp.sol协议合约的公共地址。 It is used by RrpRequester.sol to point itself to AirnodeRrp.sol.

See the list of all [Airnode contract addresses](../reference/airnode-addresses.md) in the reference section.

## Step #2: Implement the request logic

There are two types of requests provided by the AirnodeRrp.sol contract. See the [Request](../concepts/request.md) page for information related to each request type.

This example uses a [full request](../concepts/request.md#full-request) type (note the `airnodeRrp.makeFullRequest` function call in the code below) which is called from the requester's own function `callTheAirnode`. The function `makeFullRequest` requires that the requester pass all parameters needed by Airnode to call its underlying API.

Once the request has been made to `airnodeRrp.makeFullRequest`, the AirnodeRrp.sol contract returns a `requestId` confirming the request has been accepted and is in process of being executed. Your requester would most likely wish to track all `requestId`s. Note the line `incomingFulfillments[requestId] = true;` in the code below that stores the `requestId`s in a mapping. This is useful when the Airnode responds to the requester later at the function (`airnodeCallback`) with the `requestId` and the `data` requested.

```solidity
import "@api3/airnode-protocol/contracts/rrp/requesters/RrpRequester.sol";

contract MyRequester is RrpRequester {
  mapping(bytes32 => bool) public incomingFulfillments;
  mapping(bytes32 => int256) public fulfilledData;

  constructor (address airnodeRrpAddress)
      public
      RrpRequester(airnodeRrpAddress)
  {}

  function callTheAirnode(
      address airnode,
      bytes32 endpointId,
      address sponsor,
      address sponsorWallet,
      bytes calldata parameters // Inbound API parameters which may already be ABI encoded
      )
      external
  {
      bytes32 requestId = airnodeRrp.makeFullRequest( // Make the Airnode request
          airnode,                        // airnode
          endpointId,                     // endpointId
          sponsor,                        // sponsor's address
          sponsorWallet,                  // sponsorWallet
          address(this),                  // fulfillAddress
          this.airnodeCallback.selector,  // fulfillFunctionId
          parameters                      // API parameters
          );
      incomingFulfillments[requestId] = true;
  }

  function airnodeCallback(   // The AirnodeRrp.sol protocol contract will callback here.
      bytes32 requestId,
      bytes calldata data
  {
      ...
  }
}
```

### Request Parameters

A full request using the AirnodeRrp.sol contract `makeFullRequest` function requires all parameters needed by the Airnode application to be passed at runtime. This is in contrast to a template request that would use a template for some or all of the required parameters. Learn more about [using templates](call-an-airnode.md#using-templates).

Since the `callTheAirnode` function makes a [full request](../concepts/request.md#full-request), it must gather the following parameters to pass on to `airnodeRrp.makeFullRequest`.

- **airnode** and **endpointId**: As a pair, these uniquely identify the endpoint desired at a particular Airnode.

- **sponsor**: The [sponsor](requesters-sponsors.md#what-is-a-sponsor) address.

- **sponsorWallet**: The [sponsor wallet](requesters-sponsors.md#how-to-derive-a-sponsor-wallet) address that the sponsor received when deriving the wallet for the Airnode being called.

- **fulfillAddress** and **fulfillFunctionId**: The public address of your requester contract and its function that is called upon the return of the request.

- **parameters**: Specify the API parameters and any [reserved parameters](../reference/specifications/reserved-parameters.md), these must be encoded. See [Airnode ABI specifications](../reference/specifications/airnode-abi-specifications.md) for how these are encoded.

  In most, cases the parameters are encoded off-chain and passed to the requester which only forwards them. You can use the [@api3/airnode-abi](../reference/specifications/airnode-abi-specifications.md#api3-airnode-abi) package to perform the encoding and decoding. Take a look at the JavaScript snippet below.

  ```javascript
  // JavaScript snippet

  import { encode } from '@api3/airnode-abi';

  const parameters = [
    { type: 'string32', name: 'coin', value: 'ETH' },
    { type: 'string32', name: 'apiKey', value: 'UHHS7SRGC975E' },
  ];
  const encodedData = encode(parameters);

  console.log(encodedData);
  // '0x...'
  ```

  However, this is not a hard requirement and you can encode the parameters on-chain as well. Take a look at the Solidity snippet below.

  ```solidity
  // Solidity snippet

  abi.encode(
    string32("1SS"),
    string32("period"), "30d",
    string32("symbols"), "btc,eth,matic,link,uni,sushi,aave,chz,theta,rsr,grt,enj,ocean,kacy"
  )
  ```

For additional information on request parameters when calling `airnodeRrp.makeFullRequest()`, see [Request Parameters](../concepts/request.md#request-parameters) in the Reference section.

## Step #3: Capture the Response

As soon as the Airnode gets a request, it gathers the data, encodes it and starts an on-chain transaction responding to the request. The Airnode calls the AirnodeRrp.sol contract function `fulfill()`, which in turn calls the requester, in this case, at `airnodeCallback`. For the purposes of the callback, recall the request supplied the request contract address and the desired callback function which the AirnodeRrp.sol protocol contract stored with the `requestId`.

```solidity
import "@api3/airnode-protocol/contracts/rrp/requesters/RrpRequester.sol";

contract MyRequester is RrpRequester {
    mapping(bytes32 => bool) public incomingFulfillments;
    mapping(bytes32 => int256) public fulfilledData;

    constructor (address airnodeRrpAddress)
        public
        RrpRequester(airnodeRrpAddress)
    {}

    function callTheAirnode(
        ...
    }

    function airnodeCallback(        // The AirnodeRrp.sol protocol contract will callback here.
        bytes32 requestId,
        bytes calldata data
        )
        external
        onlyAirnodeRrp
    {
        require(incomingFulfillments[requestId], "No such request made");
        delete incomingFulfillments[requestId];
        int256 decodedData = abi.decode(data, (int256));
        fulfilledData[requestId] = decodedData;
    }
}
```

### Response Parameters

The callback to a requester contains two parameters, as shown in the `airnodeCallback` function in the code sample above.

- **requestId**: First acquired when making the request and passed here as a reference to identify the request for which the response is intended.
- **data**: In case of a successful response, this is the requested data which has been encoded and contains a [timestamp](/ois/v1.0.0/reserved-parameters.md#timestamp-encoded-to-uint256-on-chain) in addition to other response data. Decode it using the function `decode()` from the `abi` object.

## Step #4: Deploy and Sponsor the Requester

Deploy the requester to the desired blockchain and then sponsor the requester. See [Requesters and Sponsors](requesters-sponsors.md#how-to-sponsor-a-requester) to learn more about sponsoring a requester.
