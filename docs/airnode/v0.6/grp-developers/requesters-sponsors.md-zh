---
title: 请求者和赞助者
---

<TitleSpan>开发者</TitleSpan>

# {{$frontmatter.title}}

<VersionWarning/>

<TocHeader /> <TOC class="table-of-contents" :include-level="[2,3]" />

作为一个开发者，了解什么是请求者，什么是赞助者是有帮助的。 它们都是Airnode 生态系统的重要组成部分。 本文档将进一步定义它们，并指导您使用管理员CLI命令，完成赞助请求者和获得赞助钱包的过程。

## 什么是请求者？

记住[请求者](../concepts/requester.md) 这个术语是很重要的。 当提到请求者时，指的是调用 Airnode 的智能合约。

> ![image](../assets/images/requesters-sponsors-1.png)

作为例子，可以在 [概述](./) 文档中的图表中查看的 `myContract.sol` 合约，它就是请求者。

## 什么是赞助者？

同样重要的是 [赞助者](../concepts/sponsor.md) 这一术语。 赞助者可以是个实体，如您自己、一个组织等。 赞助者在请求者和 Airnodes 之间创建关系。

### 赞助商的请求者/Airnode关系

作为一个赞助商，你将使用你拥有的助记符内的账户的公共地址来 "**赞助一个请求者**" 然后使用公共地址(称为 [赞助商地址](../concepts/sponsor.md#sponsoraddress)) 来为一个Airnode "**衍生一个 [赞助商钱包](../concepts/sponsor.md#sponsorwallet)**" 。 这个行为在赞助商的请求者和一个特定的Airnode之间建立了一种关系。 你这样做是因为赞助者是为满足请求而付费的实体，即Airnode将产生的gas费用。 当请求者调用时，这些费用将从Airnode的 `sponsorWallet` of中提取。

::: tip 赞助商地址

一个 [赞助商地址](../concepts/sponsor.md#sponsoraddress) 是一个帐户的公开地址，通常是默认帐户。 可以使用助记符中的另一个账户，而不是默认账户。 `sponsorAddress`是用来唯一地识别一个赞助商的。

:::

1. 在下面的图表中，赞助者使用 `sponsorAddress` 赞助一个请求者，并使用管理者CLI。 除非指定其他账户，否则CLI将使用作为 `sponsorAddress`传递的助记词的默认地址进行赞助。

2. 下一步，赞助者将使用 `sponsorAddress` 为Airnode生成 `sponsorWallet`。
3. 请求者现在可以对 Airnode提出请求。

> ![image](../assets/images/sponsor-overview.png)

---

在上图中，有可能使用相同的赞助商地址`(0xF4...dDyu9)`来为其他Airnode衍生出其他赞助商钱包。 而且，有可能以相同的`sponsorAddress`赞助一个以上的请求者。 而且，重要的是要记住，所有请求者现在都可以访问所有的Airnode，无论他们是否需要。 在这种情况下，没有任何伤害。

### 高级方案

- **两个请求者，一个Airnode，一个赞助钱包**:

  两个以相同的`sponsorAddress` (例如`0xF4...dDyu9`)赞助的请求者，将使用由`sponsorAddress`衍生的单一赞助商钱包访问同一个Airnode。

- **两个请求者，一个Airnode，一个赞助钱包**:

  赞助两个不同的请求者，每个请求者都有一个不同的 `sponsorAddress` (例如， `0xF4...dDyu9` 和 `0xG9...fFzc5`)。 使用独立的赞助商地址，你可以为同一个Airnode衍生出两个独立的赞助商钱包。 现在，每个请求者在使用Airnode时，将先从一个单独的Airnode赞助商钱包中耗尽资金。

- **两个请求者，一个Airnode，一个赞助钱包**:

  请求者可以从两个不同的 Airnode 提出请求。 用 `sponsorAddress`赞助请求者。 使用`sponsorAddress`，为两个Airnode各衍生出一个赞助者钱包。 Despite the fact that the sponsorWallet for each Airnode was derived with the same `sponsorAddress` the sponsorWallets are different since they are derived using the airnode's xpub plus the `sponsorAddress`. The sponsor must fund both wallets separately using the unique `sponsorWalletAddress` of the two sponsorWallets.

### Things to Remember

When you sponsor a requester with a `sponsorAddress` you are giving it permission to use the sponsorWallet (associated with a Airnode) that was derived using the same `sponsorAddress`.

When the requester makes a request to the Airnode, the Airnode will use funds from the corresponding sponsorWallet to pay gas costs in response to the request. Therefore the sponsor pays for the fulfillment of the request.

Sponsors need to keep their sponsorWallets topped off if they want Airnodes to fulfill requests made by their requesters. However this does not cover the cost of API data that the Airnode serves, see [API Provider Fees](fees.md#api-provider-fees).

## Admin CLI Commands

There are several sponsor and requester related commands in the [Admin CLI Commands](../reference/packages/admin-cli.md) package. You can also see a list of available commands using `npx @api3/airnode-admin --help`.

In the next two sections of this doc you will use two commands from the `@api3/airnode-admin` package to _sponsor a requester_ and to _derive a sponsor wallet_.

1. [sponsor-requester](../reference/packages/admin-cli.md#sponsor-requester) sponsors a requester.
2. [derive-sponsor-wallet-address](../reference/packages/admin-cli.md#derive-sponsor-wallet-address)creates a sponsor wallet associated with an Airnode.

## How to Sponsor a Requester

To sponsor a requester execute the `sponsor-requester` command using the parameters detailed in the list below. Your requester should already be deployed on-chain. This command has transaction gas costs.

- `providerURL`: A blockchain provider URL (such as Infura) with providerID for the desired network.
- `sponsor-mnemonic`: Used for gas costs to fund the sponsorship and used to derive the sponsorAddress from the default address. The sponsorAddress will be needed to derive a sponsorWallet for an Airnode.
- `requester-address`: Address of the requester contract.
- `derivation-path (optional)` (_not used in the example below_): Selects an alternate account to use from the mnemonic rather than the default account.

Executing the command [sponsor-requester](../reference/packages/admin-cli.md#sponsor-requester) will sponsor a requester and returns the requesterAddress and sponsorAddress.

:::: tabs

::: tab Linux/Mac

```bash
npx @api3/airnode-admin sponsor-requester \
  --providerUrl https://ropsten.infura.io/v3/<KEY> \
  --sponsor-mnemonic "cricket...oppose" \
  --requester-address 0x2c...gDER7

Requester 0x2c...gDER7 sponsored using sponsorAddress 0xF4...dDyu9
```

:::

::: tab Windows

```
npx @api3/airnode-admin sponsor-requester ^
  --providerUrl https://ropsten.infura.io/v3/<KEY> ^
  --sponsor-mnemonic "cricket...oppose" ^
  --requester-address 0x2c...gDER7

Requester 0x2c...gDER7 sponsored using sponsorAddress 0xF4...dDyu9
```

:::

::::

## How to Derive a Sponsor Wallet

To use a particular Airnode you must _derive a sponsorWallet_. Once the sponsorWallet is created it must be funded using the public address (`sponsorWalletAddress`) returned by the command `derive-sponsor-wallet-address`. Each Airnode keeps a separate list of individual sponsorWallets that can access the Airnode. Learn more about a [sponsorWallet](../concepts/sponsor.md#sponsorwallet).

To derive a sponsorWallet for an Airnode execute the [derive-sponsor-wallet-address](../reference/packages/admin-cli.md#derive-sponsor-wallet-address) command using the parameters detailed in the list below. There are no transaction gas costs to do so.

- `airnode-xpub`: The extended public address of the Airnode for path m/44'/60'/0'.
- `airnode-address`: The public address of the desired Airnode.
- `sponsor-address`: The sponsorAddress (an address of an Ethereum account) owned by a sponsor. Usually the sponsorAddress is the one returned when sponsoring a requester.

The command `derive-sponsor-wallet-address` will return the public address (`sponsorWalletAddress`) of the sponsorWallet to be funded by the sponsor.

:::: tabs

::: tab Linux/Mac

```bash
npx @api3/airnode-admin derive-sponsor-wallet-address \
  --airnode-xpub xpub6CUGRUo... \
  --airnode-address 0xe1...dF05s \
  --sponsor-address 0xF4...dDyu9

Sponsor wallet address: 0x14D5a34E5a370b9951Fef4f8fbab2b1016D557d9
```

:::

::: tab Windows

```bash
npx @api3/airnode-admin derive-sponsor-wallet-address ^
  --airnode-xpub xpub6CUGRUo... ^
  --airnode-address 0xe1...dF05s ^
  --sponsor-address 0xF4...dDyu9

Sponsor wallet address: 0x14D5a34E5a370b9951Fef4f8fbab2b1016D557d9
```

:::

::::

Sponsors need to keep their sponsorWallets topped off if they want Airnodes to fulfill requests made by their requesters. However this does not cover the cost of API data that the Airnode serves, see [API Provider Fees](fees.md#api-provider-fees).

If you forget the public address (`sponsorWalletAddress`) of the sponsorWallet simply run `derive-sponsor-wallet-address` again. Since the wallet already exists for the airnodeAddress/sponsorAddress pair it will just return the address.

<airnode-SponsorWalletWarning/>

## Record Keeping

During and after sponsoring requesters and deriving a sponsorWallet there are a few things to keep track of.

| Item                   | Description                                                                                                                                                                                                                                                          |
| ---------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| sponsor's mnemonic     | The mnemonic from which the `sponsorAddress` was extracted.                                                                                                                                                                                                          |
| sponsor address        | The public address of an account derived from a sponsor's mnemonic when sponsoring a requester. Record which `sponsorAddress` was used to create a sponsorWallet for each Airnode.                                                                                   |
| sponsor wallet address | Record the `sponsorWalletAddress` of the sponsorWallet derived for an Airnode. For each Airnode you have derived a sponsorWallet, the Airnode keeps the private key and returns the public address (`sponsorWalletAddress`) which is used to fund the sponsorWallet. |

You can acquire the public address (`sponsorWalletAddress`) of a sponsorWallet later, if you loose it, by running the command `derive-sponsor-wallet-address` again. Since the sponsorWallet was already created for the `sponsorAddress/airnodeAddress` pair, the command will only return the public address for the wallet. However you must use the same `sponsorAddress` used when the wallet was first created or a new sponsorWallet will be created.
