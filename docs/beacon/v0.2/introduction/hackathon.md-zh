---
title: ETHDenver - 2022年2月
---

<TitleSpan>Introduction</TitleSpan>

# {{$frontmatter.title}}

<VersionWarning/>

<TocHeader /> <TOC class="table-of-contents" :include-level="[2,3]" />

> **尝试通过 [#BUIDLWEEK](https://www.ethdenver.com/buidlweek) 在ETHDenver来构建Beacon吧！”**

这个指南将引导您开发一个智能合约，该合约将使用API3以Amberdata运营的第一方预言机设定的Beacon。

## Amberdata Beacons

[Amberdata](https://amberdata.io) 是行业领先的加密货币市场数据提供商之一，并已将其一些API端点开放给了Beacon使用，以供您构建DeFi应用程序。 您可以[在此](../reference/beacon-browser.md)查看完整的名单。 这些Beacon代表着VWAP（成交量加权平均价）对值，是交易数据的一种汇总方式。 VWAP是资产在一段时间内基于交易量和价格的平均价格。 详细介绍请看下面的Amberdata文档链接，以便更好地理解所提供值的意思。

- [Data Dictionary](https://amberdata.io/dictionary/)
- [Latest [ENT]](https://docs.amberdata.io/reference#spot-vwap-pairs-latest) - (VWAP)
- [Gas Predictions](https://docs.amberdata.io/reference#get-gas-predictions)

## 需求

Beacon在以下网络中可使用：

| Network        | Network                                                                  |
|:-------------- |:------------------------------------------------------------------------ |
| Ropsten        | [https://faucet.egorfine.com/](https://faucet.egorfine.com/)             |
| Rinkeby        | [https://www.rinkebyfaucet.com/](https://www.rinkebyfaucet.com/)         |
| Goerli         | [https://faucet.goerli.mudit.blog/](https://faucet.goerli.mudit.blog/)   |
| Polygon-Mumbai | [https://faucet.polygon.technology/](https://faucet.polygon.technology/) |

选择您想要处理工作的网络，创建一个钱包，然后从相应的源头为其提供资金。

::: tip

你可以运行 `npx @api3/airnode-admin 生成助记符号`。

:::

您还需要一个区块链提供商URL。 您可以在Ropsten，Rinkeby和Goerli创建一个免费的[Infura](https://infura.io/) 账户，或者使Polygon-Mumbai的公开提供商URL之一，例如 `https://rpc-mumbai.today`。 在接下来的步骤中，您钱包的助记词和区块链提供商URL将放入您的 `credentials.json` 文件中。

## 操作指南

复制这个 [Beacon reader example](https://github.com/api3dao/beacon-reader-example)

```sh
git clone https://github.com/api3dao/beacon-reader-example.git
cd beacon-reader-example
```

安装dependencies

```sh
npm install
```

### 测试

运行 `test/` 目录中定义的单元测试：

```sh
npm run test
```

### 网络： `localhost`

在单独的终端上启动一个本地的Ethereum节点：

```sh
npm run eth-node
```

部署 `MockRrpBeaconServer`, `BeaconReaderExample`,并模拟设置一个Beacon值：

```sh
npm run deploy:localhost
```

您可以跳过 `localhost` 的白名单步骤。

让 `BeaconReaderExample`读取模拟的beacon值，然后将其输出在终端上：

```sh
npm run read-beacon:localhost
```

### 网络： `ropsten`, `rinkeby`, `goerli`, `polygon-mumbai`

在repo的根目录创建一个 `credentials.json` 文件，类似于 `credentials.example.json`。 填写您将使用的链的助记符和提供者 URL。

::: tip

您可以在以下命令中将`polygon-mumbai` 替换为`ropsten`，`rinkeby` 或是`goerli`。

:::

部署`BeaconReaderExample`指向预部署的`RrpBeaconServer`：

```sh
npm run deploy:polygon-mumbai
```

将`BeaconReaderExample`列为白名单，您为由 Amberdata 提供支持的Beacon部署`ETH/USD`D 案例：

```sh
npm run whitelist-reader:polygon-mumbai
```

让 `BeaconReaderExample`读取模拟的beacon值，然后在终端上输出：

```sh
npm run read-beacon:polygon-mumbai
```

::: tip

您可以通过修改`scripts/whitelist-reader.js`和 `scripts/read-beacon.js`来读取 `ETH/USD`以外的Beacon值。 请参阅[Beacons IDs](../reference/beacon-browser.md) 文档。

:::

这些应该可以让您开始构建一个Beacon项目了！ 如果您想要了解更多信息，请继续阅读。

## 依赖项

Amberdata 使用 [Airnode `v0.3`](/airnode/v0.3) 作为预言机节点，我们 开发了这些节点以支持API提供商操作的预言机. 建议您在项目中使用`@api3/services`的 `v0.1` 版本，以便轻松获取有关特定 Beacon 的信息。

## `@api3/services` API

`@api3/services` API公开了两个函数：

1. [whitelistBeaconReader](https://github.com/api3dao/services/blob/main/src/index.ts#L66)  （白名单Beacon读取器）：此函数可用于以编程的方式将您已实现和部署的Beacon读取合约列入白名单，以从特定Beacon读取相关值。 您可以在[此处](https://github.com/api3dao/beacon-reader-example/blob/main/scripts/whitelist-reader.js#L34)的Beacon读取示例项目中看到白名单脚本并使用它。 1.该函数需要5个参数：
   - `beaconId` - the ID of the Beacon for which the Beacon reader will be whitelisted
   - `beaconReaderAddress` - the address of the Beacon reader that will be whitelisted
   - `chain` - the name of the chain, e.g. `ropsten`
   - `providerUrl` - the URL of the blockchain provider that will be used to create a transaction
   - `senderAccount` - an object with two fields, `mnemonic` (required) and `derivationPath` (optional) specifying the account that will be used to make the whitelisting transaction
2. [getServiceData](https://github.com/api3dao/services/blob/main/src/index.ts#L27) - You can use this function to get the details of a particular Beacon. The most important fields that this will return are the address of `RrpBeaconServer` (which you need to deploy your Beacon reader smart contract) and `beaconId` (which you need to read a Beacon value). This function requires 3 parameters:
   - `apiName` - the [name of the API](https://github.com/api3dao/operations/tree/main/data/apis). Currently, the only option is `Amberdata`
   - `beaconName` - the name of one of the [beacons](https://docs.api3.org/beacon/v0.1/reference/beacon-ids.html), e.g. `ETH/USD`
   - `chain` - the name of the chain, e.g. `ropsten`

Using `@api3/services` is not required to create a Beacon reader application. You can whitelist a Beacon reader smart contract manually by following the instructions below. You can get the `beaconId` from [Beacon IDs Section](../reference/beacon-browser.md) and an address of the `RrpBeaconServer` from the [Contract Addresses Section](../reference/contract-addresses.md).

## Whitelisting

Before a smart contract can read a Beacon value, it needs to be whitelisted by an on-chain mechanism authorized by the API3 DAO. This is done for protection and monetization of premium, first-party oracle services. The Beacons set up for the hackathon allow self-whitelisting, which means that you are allowed to make the transaction that will whitelist your contract to read the specific Beacon.

::: tip

Amberdata Beacons are made available on a number of testnets for _#BUIDLWEEK_. For production usage, you will need to get in contact with an API3 DAO representative to have your contract whitelisted for it to be able to read Beacons.

:::

### Manual whitelisting

In addition to using the `@api3/services` API, you can manually whitelist your contracts by making a transaction over a block explorer.

1. Open [Etherscan](https://etherscan.io/)/[Polygonscan](https://polygonscan.com/) and select the desired testnet using the icon to the right of the Sign-In button in the top right corner.

2. Enter the address for the [SelfServeRrpBeaconServerWhitelister](../reference/contract-addresses.md#selfserverrpbeaconserverwhitelister-sol) contract in the search field.

3. Click _contract > write contract > connect to web3_. Connect your wallet using the testnet you have selected in Etherscan/Polygonscan.

4. Select the `whitelistReader` function (#5) and enter the [beaconId](../reference/beacon-browser.md) and the address of your smart contract (i.e., Beacon reader).

5. Click the _Write_ button and execute the transaction from your wallet.

::: warning

Each deployed Beacon reader contract needs to be whitelisted for all the respective Beacons that it will read.

:::

## Getting Help

If you need any assistance, please drop by the [API3 Discord support channel](https://discord.com/channels/758003776174030948/871787274386411580).

## Work with API3

Consider working with the Core Technical Team at API3. Our search for you is never ending. We want talented individuals that think blockchain technology is _the big thing_, that are ready to make it better and embrace collaboration as an endless journey. [Work with API3](/api3/introduction/work.md).
