---
title: 处理提案
---

# {{$frontmatter.title}}

<TocHeader /> <TOC class="table-of-contents" :include-level="[2,3]" />

在 DAO 池中质押代币将赋予您创建和投票 提案的治理权限。

要创建一个提案，您必须在7 天内没有创建过一个提案，您必须至少持有池中总质押代币0.1% 的质押代币数量。 这个需要的百分比，以及其他 DAO 参数可以由 [控制面板属性](../contract-architecture/dashboard-attributes.md) 中所述的 DAO 来调整。 要查看 地址质押代币在池中的百分比，请访问 [DAO 追踪器 钱包地址页面](https://enormous.cloud/dao/api3/tracker/wallets)。

您可以对所有提案投票，而不论您所质押代币占 池中代币的百分比是多少。 请参阅 [如何投票](voting.md) 中的说明。 或者， 你可以将你的投票权授予其他人。 查看 API3 论坛的 [delegation pitch 版块](https://forum.api3.org/c/delegation-pitch/7) 查阅社区成员的帖子或 发表您自己的观点。

## 开始

1. 访问 [DAO 控制面板](https://api3.eth.link/)
2. 点击右上角的 **连接钱包** 按钮，并 使用 Ethereum 主网连接到您的钱包地址。

<!-------------------------->

## 提案及历史记录

**Governance** 页面显示活跃提案列表，而 **历史记录** 页面显示已执行或被否决的提案。

:::: tabs

::: tab 阅读 & 学习

1. 浏览 **Governance** 页面。

   > 您可以在这里浏览和创建提案，查看国库，和授权 您的投票。 **Active proposals**栏列出了所有开放投票的提案。

   > 有两类提案，主要和次要提案。 主要提案 需要绝对多数票，而次要提案需要15% 票就能通过。 对于列表中的每个提案，你可以看到标题、提议 类型、投票截止日期和投票状态。

   > 要查看更多详情，请单击相应提案。 详细视图 显示您的投票授权状态， **Summary** 部分则展示提案的 细节。

2. 要查看先前的治理提案，请浏览 **History** 页面。

   > 历史记录中的提案已被执行或被否决。

:::

::: tab 观看和学习

<Video src="https://www.youtube.com/embed/k0XEkJtWAGk">

:::

::::

<!-------------------------->

## 创建提案

提案是DAO治理的一个重要部分，可用来资助DAO 项目或批准DAO级别的决定，如更新质押目标的决定。

创建提案的步骤是：

1. (推荐）在API3论坛发表观点检查帖子（[sentiment check post](https://forum.api3.org/t/sentiment-check-template/56)）宣传你的观点并收集反馈意见。 一般来说，在论坛上得到社区参与的观点更有可能在成为正式提案后通过。
2. 在 API3 论坛上创建正式提案帖子（[official proposal post](https://forum.api3.org/t/api3-dao-example-proposal-template/52)）。 这应该产生一个[IPFS提案描述](#using-ipfs-for-proposals)的链接。
3. 在收到上述步骤的反馈后，使用下面描述的 DAO控制面板创建一个正式提案。
4. 在正式提案论坛中提供一个与此提案相关的链接， 让社区成员能直接通过链接投票。

  <!--**Proposal Types**

  In general, a proposal type of _Primary_ has a larger treasury and more permissions but has more stringent voting settings than a _Secondary_ type. For a technical breakdown of the different permissions granted to the DAO's proposal types (and corresponding Agents) see this [README](https://github.com/api3dao/api3-dao/blob/develop/packages/dao/README.md#permissions).
  -->

#### 重要提示

::: tip 公开地址和ENS名称

对于公开地址，使用一些 字母大写的地址校验和版本。 Copy your address to etherscan to get its checksum value. ENS names are allowed. See the [Using ENS Names](proposals.md#using-ens-names) section below.

:::

::: tip USDC Precision

USDC uses 6 decimal places of precision as opposed to 18 that many other ERC20 tokens use. Add 6 zeros after the amount you are asking for.

:::

To create a new proposal using the DAO dashboard:

:::: tabs

::: tab Read & Learn

1. Click the **New Proposal** button on the Governance page.

2. Select the **Proposal Type** on the proposal form.

   > Proposals can be submitted to either the _Primary_ or _Secondary_ voting types. These two types have access to separate treasuries, have different voting settings, and have different permissions to change contract settings. For a technical breakdown of the different permissions granted to the DAO's proposal types (and corresponding Agents) see this [README](https://github.com/api3dao/api3-dao/blob/develop/packages/dao/README.md#permissions).

3. Enter a descriptive **Title**.

   > The title will appear on the Governance page and is used to identify the proposal. A good descriptive title will help others navigate the proposal list.

4. Enter a **Description** that details the proposal.

   > A description can be typed text but consider using a PDF hosted on IPFS. See the [Using IPFS for Proposals](proposals.md#using-ipfs-for-proposals) section below. Also consider adding a link back the forum where you posted your proposal for discussion.

5. Enter the **Target Contract** address.

   > This is the address of the contract to call. For example the commonly used target contract for USDC is
   <code style="overflow-wrap: break-word;">0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48</code>.

6. Enter the **Contract Target Signature**.

   > Defines the signature of the function to call within the target contract. For the target contract USDC mentioned above use `transfer(address,uint256)`. <span style="color:orange">Do not use any > spaces in the signature: leading, trailing or otherwise.</span>

7. Enter an **ETH Value**.

   > You can use zero if the target function is not `payable`.

8. Enter **Parameters** which are the arguments that will be used to satisfy the signature of the target contract function.

   > The arguments must be provided in JSON array format where the values are stringified. 
   > 
   > ```json
   >    ["0xF4EB52Cf9D31a...d1663d78ddDEE9", "499999000000"]
   > ```

   In the example above, the respective Agent (primary or secondary) would be calling the USDC contract (`0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48`) to transfer 499,999 USDC to `0xF4EB52Cf9D31a...d1663d78ddDEE9`. Note that since `transfer(address,uint256)` transfers funds from the sender to the specified address, the USDC is asked to be supplied from the Agent's balance.

9. When you are ready, click the **Create** button at the bottom of the page.

   > The proposal is then added to the proposal list and can be voted on.

:::

::: tab Watch & Learn

<Video src="https://www.youtube.com/embed/XO1iA3wSYMQ">

:::

::::

## Proposal Execution

<!-- The following is the older version of execution rules. This was not
very accurate, see PR: AN384 proposals #516.

A proposal is ready for execution if:

1. The proposal hasn't already been executed, and
2. greater than 50% of all voting power has voted "yes" on the proposal,

OR

1. The proposal hasn't already been executed, and
2. the proposal's voting period has ended, and
3. the total "yes" vote exceeds the "no" vote, and
4. at least 50% (for Primary voting app proposals) or 15% (for Secondary voting
   app proposals) of all voting power has voted "yes" on the proposal.

Once a proposal has satisfied either set of criteria, anyone can send a
transaction executing it using the Execute button that appears on its details
page, as shown below:
-->

A proposal is ready for execution if:

1. The proposal hasn't already been executed, and
2. the proposal's voting period has ended, and
3. the total "yes" vote exceeds the "no" vote, and
4. (for Secondary type proposals) at least 15% of all voting power has voted "yes" on the proposal.

Primary type proposals require 50% of all voting power to have voted "yes" on the proposal. Both primary and secondary type proposals execute immediately once 50% of all voting power has voted "yes" on them.
> <p align="left">
>  <img src="../figures/dashboard/executable-proposal.png" width="400" />
> </p>
## Using ENS Names

You are encouraged to use the [ENS app](https://app.ens.domains/) to register a name and associate it with an Ethereum account. Then, while entering your proposal parameters, you can use this ENS name instead of the account address. Before making the transaction that will create the proposal, the DAO dashboard will look up the address that the ENS name is pointing to and use the raw address in the proposal. Therefore, changing the address that the ENS name is pointing to after this look up operation **WILL NOT** have an affect on the proposal.

For voters to see your ENS name instead of the raw address on the proposal details page, you will have to use the [ENS app](https://app.ens.domains/) to set a reverse record pointing to your ENS name (i.e., you need to have your raw address point to the ENS name). If your proposal will make a `transfer(address,uint256)` call to an ERC20 token contract where `address` is the address of a _multisig_ wallet, you can [set a reverse record with the multisig](https://medium.com/the-ethereum-name-service/you-can-now-manage-ens-names-with-gnosis-safe-9ddcb7e6c4ac) to your ENS name. See Parameters in [this proposal](https://api3.eth.link/#/history/secondary-6) for an example.

## Using IPFS for Proposals

Consider this use case: You posted on the [API3 forum](https://forum.api3.org/) about a potential proposal. You received positive feedback and decide to formally create a proposal using the DAO dashboard. In the proposal's description field you provide a link back to the forum so people can again see the proposal details. How does the voter know that it's the exact same proposal they had read earlier in the forum? IPFS addressing content by its hash is convenient here, because any change you'll make to your proposal will change its hash.

![image](../assets/images/ipfs-proposals.png)

To host a proposal description on IPFS:

1. Create a PDF version of the proposal.
2. Upload the PDF to [Fleek](https://fleek.co) or your preferred IPFS hosting provider. To do so using Fleek, create a free Basic account and use the Upload tool on the Storage page. Fleek will provide an IPFS hash of the PDF, for example:
   <code style="overflow-wrap: break-word;">bafybeifl4prxv75fgumtjh4ovklfkp7zzt7dwkl4xmndv37gtcalwpam2u</code>.
3. If using Fleek, append the hash to `https://ipfs.fleek.co/ipfs/`. The URL for the above hash would then be:

   > <a style="overflow-wrap: break-word;" target="_blank"
   >  href="https://ipfs.fleek.co/ipfs/bafybeifl4prxv75fgumtjh4ovklfkp7zzt7dwkl4xmndv37gtcalwpam2u">
   > https://ipfs.fleek.co/ipfs/bafybeifl4prxv75fgumtjh4ovklfkp7zzt7dwkl4xmndv37gtcalwpam2u
   > </a>
4. Add the URL to your forum posting and later to the description field of your DAO dashboard proposal.

Remember that the URL the voter sees in the DAO dashboard proposal description field is final and should match the URL on the forum.

**Updating a PDF**

You can update your PDF if needed before creating a formal proposal using the DAO dashboard. First, upload the new version to your IPFS provider; since the content has changed, it will get a new hash. Next, update the link in your forum posting. Lastly, create the proposal using the DAO dashboard. Since the proposal contains the IPFS hashed link in the description field, the PDF should be considered final and changing the hashed link in the forum at this point would caution the voter.
